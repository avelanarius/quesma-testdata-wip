ALTER SEQUENCE foo INCREMENT BY 1;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INCREMENT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER SEQUENCE foo MAXVALUE 7 NO minvalue;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MAXVALUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
7
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
minvalue
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER SEQUENCE foo NOCACHE CYCLE;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOCACHE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CYCLE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER SEQUENCE foo NOORDER CACHE 5 NOCYCLE;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CACHE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOCYCLE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER SEQUENCE foo ORDER;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER TABLE x DROP COLUMN y;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
COLUMN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER TABLE x DROP y;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER TABLE x DROP IF EXISTS y;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXISTS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER TABLE x DROP COLUMN IF EXISTS y;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
COLUMN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXISTS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
ALTER TABLE old_table_name RENAME TO new_table_name;
<end_of_query/>
WordSegment
ALTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
old_table_name
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RENAME
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
new_table_name
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- ansi_cast_with_whitespaces.sql
/* Several valid queries where there is whitespace surrounding the ANSI
cast operator (::) */

-- query from https://github.com/sqlfluff/sqlfluff/issues/2720
SELECT amount_of_honey :: FLOAT
FROM bear_inventory;
<end_of_query/>
CommentSegment
-- ansi_cast_with_whitespaces.sql
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
/* Several valid queries where there is whitespace surrounding the ANSI
cast operator (::) */
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- query from https://github.com/sqlfluff/sqlfluff/issues/2720
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FLOAT
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- should be able to support an arbitrary amount of whitespace
SELECT amount_of_honey        ::        FLOAT
FROM bear_inventory;
<end_of_query/>
CommentSegment
-- should be able to support an arbitrary amount of whitespace
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
FLOAT
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT amount_of_honey::    FLOAT
FROM bear_inventory;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FLOAT
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT amount_of_honey        ::FLOAT
FROM bear_inventory;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
FLOAT
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- should support a wide variety of typecasts
SELECT amount_of_honey :: time
FROM bear_inventory;
<end_of_query/>
CommentSegment
-- should support a wide variety of typecasts
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
time
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT amount_of_honey :: text
FROM bear_inventory;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
text
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT amount_of_honey     :: VARCHAR( 512 )
FROM bear_inventory;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
WhitespaceSegment
     
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VARCHAR
<end_of_token/>
CodeSegment
(
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
512
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT amount_of_honey ::        TIMESTAMPTZ
FROM bear_inventory;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
TIMESTAMPTZ
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT amount_of_honey    ::        TIMESTAMP WITHOUT TIME ZONE
FROM bear_inventory;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
TIMESTAMP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITHOUT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TIME
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ZONE
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- should support casts with arbitrary amount of whitespace in join statements
SELECT
    bi.amount_of_honey
FROM bear_inventory bi
LEFT JOIN favorite_cola fc
    ON fc.bear_id ::   VARCHAR(512) = bi.bear_id    ::VARCHAR(512)
WHERE fc.favorite_cola = 'RC Cola';
<end_of_query/>
CommentSegment
-- should support casts with arbitrary amount of whitespace in join statements
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
bi
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
amount_of_honey
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bear_inventory
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bi
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
favorite_cola
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fc
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fc
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
bear_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
   
<end_of_token/>
WordSegment
VARCHAR
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
512
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bi
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
bear_id
<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
VARCHAR
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
512
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fc
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
favorite_cola
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'RC Cola'
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 + (2 * 3) >= 4 + 6+13 as val;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
4
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
6
<end_of_token/>
CodeSegment
+
<end_of_token/>
LiteralSegment
13
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
val
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 + ~(~2 * 3) >= 4 + ~6+13 as val;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
CodeSegment
(
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
LiteralSegment
2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
4
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
LiteralSegment
6
<end_of_token/>
CodeSegment
+
<end_of_token/>
LiteralSegment
13
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
val
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT -1;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT -1 + 5;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT ~1;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT -1 + ~5;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 4 & ~8 | 16;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
4
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
&
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
LiteralSegment
8
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
|
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
16
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 8 + ~(3);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
8
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
3
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 8 | ~ ~ ~4;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
8
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
|
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
LiteralSegment
4
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * -(5);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * -5;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * - - - 5;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * - - - (5);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * + + (5);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * - - - func(5);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
func
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * ~ ~ ~ func(5);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
func
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * +(5);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * +5;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1 * + + 5;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT FALSE AND NOT (TRUE);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT FALSE AND NOT NOT NOT (TRUE); -- parses middle NOT as column ref
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- parses middle NOT as column ref
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT FALSE AND NOT (TRUE);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT FALSE AND NOT func(5);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
func
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 'abc' LIKE - - 5; -- PG can parse this ok, and then fail due to data type mismatch
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'abc'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LIKE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
;
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- PG can parse this ok, and then fail due to data type mismatch
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 'abc' LIKE ~ ~ 5; -- PG can parse this ok, and then fail due to data type mismatch
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'abc'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LIKE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
~
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
;
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- PG can parse this ok, and then fail due to data type mismatch
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select a
/*
)
*/
from b
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
/*
)
*/
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
(SELECT 1);
<end_of_query/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
((SELECT 1));
<end_of_query/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
(((SELECT 1)));
<end_of_query/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- This is a comment

/* So is this */

/* This is a
    multiple line comment */
<end_of_query/>
CommentSegment
-- This is a comment
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
/* So is this */
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
/* This is a
    multiple line comment */
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
commit
<end_of_query/>
WordSegment
commit
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
commit and no chain
<end_of_query/>
WordSegment
commit
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
and
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
no
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
chain
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
commit work
<end_of_query/>
WordSegment
commit
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
work
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
commit work and no chain
<end_of_query/>
WordSegment
commit
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
work
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
and
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
no
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
chain
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH FUNCTION fname;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH FUNCTION fname AS ASSIGNMENT;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ASSIGNMENT
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH FUNCTION fname();
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH FUNCTION fname(bool);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH FUNCTION sch.fname(int, bool) AS ASSIGNMENT;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ASSIGNMENT
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (udt_1 AS udt_2) WITH FUNCTION fname(udt_1, udt_2) FOR udt_3;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
udt_1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
udt_2
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
udt_1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
udt_2
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FOR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
udt_3
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (sch.udt_1 AS sch.udt_2) WITH FUNCTION sch.fname(sch.udt_1, sch.udt_2) FOR sch.udt_3;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
udt_1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
udt_2
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
udt_1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
udt_2
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FOR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
udt_3
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH ROUTINE fname();
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROUTINE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH PROCEDURE fname();
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PROCEDURE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH METHOD fname();
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
METHOD
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH INSTANCE METHOD fname();
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSTANCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
METHOD
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH STATIC METHOD fname();
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
STATIC
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
METHOD
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE CAST (int AS bool) WITH CONSTRUCTOR METHOD fname();
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CONSTRUCTOR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
METHOD
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
fname
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
create database my_database
<end_of_query/>
WordSegment
create
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
database
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_database
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
create database if not exists my_database
<end_of_query/>
WordSegment
create
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
database
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
if
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
not
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_database
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE FUNCTION add(integer, integer) RETURNS integer
    AS 'select $1 + $2;'
    LANGUAGE SQL;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
add
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
integer
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
integer
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RETURNS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
integer
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'select $1 + $2;'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
LANGUAGE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SQL
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP FUNCTION add;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
add
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE FUNCTION add() RETURNS integer
    AS 'select $1 + $2;'
    LANGUAGE SQL;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
add
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RETURNS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
integer
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'select $1 + $2;'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
LANGUAGE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SQL
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE INDEX IF NOT EXISTS transaction_updated ON transaction_master (last_updated);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INDEX
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXISTS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
transaction_updated
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
transaction_master
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
last_updated
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE INDEX transaction_updated ON transaction_master(last_updated);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INDEX
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
transaction_updated
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
transaction_master
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
last_updated
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE UNIQUE INDEX transaction_updated ON transaction_master(last_updated);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UNIQUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INDEX
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
transaction_updated
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
transaction_master
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
last_updated
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE MODEL model3
OPTIONS (
    MODEL_TYPE='LOGISTIC_REG',
    AUTO_CLASS_WEIGHTS=TRUE,
    INPUT_LABEL_COLS = ['label_str']
)
AS
SELECT
    a,
    b
FROM
    table1
WHERE
    training = 1
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REPLACE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MODEL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
model3
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
OPTIONS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
MODEL_TYPE
<end_of_token/>
CodeSegment
=
<end_of_token/>
CodeSegment
'LOGISTIC_REG'
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
AUTO_CLASS_WEIGHTS
<end_of_token/>
CodeSegment
=
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
INPUT_LABEL_COLS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
[
<end_of_token/>
CodeSegment
'label_str'
<end_of_token/>
CodeSegment
]
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
training
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE ROLE foo_role
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo_role
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
create schema my_schema
<end_of_query/>
WordSegment
create
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
create schema if not exists my_schema
<end_of_query/>
WordSegment
create
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
if
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
not
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE SEQUENCE foo;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE SEQUENCE foo INCREMENT BY 3;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INCREMENT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE SEQUENCE foo MINVALUE 5 NO MAXVALUE;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MINVALUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MAXVALUE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE SEQUENCE foo NO MINVALUE MAXVALUE 12;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MINVALUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MAXVALUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
12
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE SEQUENCE foo INCREMENT BY 5 START WITH 8 CACHE 4;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INCREMENT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
START
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
8
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CACHE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
4
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE SEQUENCE foo NOCACHE;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOCACHE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE SEQUENCE foo NOCYCLE ORDER;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOCYCLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE SEQUENCE foo NOORDER;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOORDER
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Test various forms of quoted data types
CREATE TABLE foo (
    pk int PRIMARY KEY,
    quoted_name "custom udt",
    qualified_name sch.qualified,
    quoted_qualified "my schema".qualified,
    more_quoted "my schema"."custom udt",
    quoted_udt sch."custom udt"
);
<end_of_query/>
CommentSegment
-- Test various forms of quoted data types
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
pk
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PRIMARY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
KEY
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
quoted_name
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"custom udt"
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
qualified_name
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
qualified
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
quoted_qualified
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"my schema"
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
qualified
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
more_quoted
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"my schema"
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"custom udt"
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
quoted_udt
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"custom udt"
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
create table table1 (c1 SMALLINT, c2 DATE)
<end_of_query/>
WordSegment
create
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SMALLINT
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DATE
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
create table table1 (
    c1 INT NOT NULL,
    c2 INT NULL DEFAULT 1,
    c3 INT PRIMARY KEY,
    c4 INT UNIQUE,
    c5 INT REFERENCES table2,
    c6 INT REFERENCES table2 (c6_other),
    c6 INT REFERENCES table2 (c6_other) MATCH FULL,
    c6 INT REFERENCES table2 (c6_other) MATCH PARTIAL,
    c6 INT REFERENCES table2 (c6_other) MATCH SIMPLE,
    c6 INT REFERENCES table2 (c6_other) ON DELETE NO ACTION,
    c6 INT REFERENCES table2 (c6_other) ON UPDATE SET NULL,
    c6 INT REFERENCES table2 (c6_other) ON DELETE RESTRICT ON UPDATE CASCADE,
    c7 INT NOT NULL DEFAULT 1 UNIQUE REFERENCES table3 (c7_other),
    c8 INT NOT NULL DEFAULT 1::INT
)
<end_of_query/>
WordSegment
create
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DEFAULT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PRIMARY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
KEY
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c4
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UNIQUE
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c6
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c6_other
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c6
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c6_other
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c6
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c6_other
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PARTIAL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c6
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c6_other
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SIMPLE
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c6
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c6_other
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ACTION
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c6
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c6_other
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c6
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c6_other
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RESTRICT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CASCADE
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c7
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DEFAULT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UNIQUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c7_other
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c8
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DEFAULT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
INT
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
create table table1 (
    c1 INT,
    c2 INT,
    c3 INT,
    PRIMARY KEY (c1),
    UNIQUE (c2, c3),
    FOREIGN KEY (c2, c3) REFERENCES table2 (c2_, c3_)
)
<end_of_query/>
WordSegment
create
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
PRIMARY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
KEY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
UNIQUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c3
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FOREIGN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
KEY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c3
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c2_
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c3_
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE TABLE  t2 AS
SELECT
  a,
  b
FROM t1
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REPLACE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
t2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t1
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE final_rows AS
WITH source_table AS
(
    SELECT * FROM source_data
)
SELECT * FROM source_table
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
final_rows
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
source_table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
source_data
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
source_table
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE final_rows AS
(
    WITH source_table AS
    (
        SELECT * FROM source_data
    )
    SELECT * FROM source_table
)
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
final_rows
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
source_table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
source_data
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
source_table
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE a (
    id INT AUTO_INCREMENT
)
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AUTO_INCREMENT
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE a (
    id VARCHAR(100) COMMENT 'Column comment'
)
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VARCHAR
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
100
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
COMMENT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'Column comment'
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE users (
    username TEXT,
    age INT CHECK(age > 18)
);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
users
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
username
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TEXT
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
age
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CHECK
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
age
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
18
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE users (
    username TEXT,
    age INT CHECK(age IS NOT NULL)
);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
users
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
username
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TEXT
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
age
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CHECK
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
age
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
Persons
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ID
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
LastName
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
varchar
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
255
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FirstName
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
varchar
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
255
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
Age
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
int
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
City
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
varchar
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
255
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CONSTRAINT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CHK_Person
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CHECK
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
Age
<end_of_token/>
CodeSegment
>
<end_of_token/>
CodeSegment
=
<end_of_token/>
LiteralSegment
18
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
City
<end_of_token/>
CodeSegment
=
<end_of_token/>
CodeSegment
'Sandnes'
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
BEGIN TRANSACTION;
<end_of_query/>
WordSegment
BEGIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRANSACTION
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE IF NOT EXISTS "tbl" ( "col" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP );
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXISTS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"tbl"
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"col"
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TIMESTAMP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DEFAULT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CURRENT_TIMESTAMP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
COMMIT;
<end_of_query/>
WordSegment
COMMIT
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE b (
    b INT NOT NULL,
    c INT NOT NULL,
    d INT NOT NULL,
    CONSTRAINT c_b FOREIGN KEY (b) REFERENCES a(b) ON DELETE RESTRICT ON UPDATE NO ACTION,
    CONSTRAINT c_d FOREIGN KEY (d) REFERENCES a(d) ON UPDATE CASCADE ON DELETE SET NULL,
    CONSTRAINT c_c FOREIGN KEY (c) REFERENCES a(c) ON DELETE SET DEFAULT
)
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
d
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CONSTRAINT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c_b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FOREIGN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
KEY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RESTRICT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ACTION
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CONSTRAINT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c_d
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FOREIGN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
KEY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
d
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
d
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CASCADE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CONSTRAINT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c_c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FOREIGN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
KEY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REFERENCES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DEFAULT
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE a (
    ts TIMESTAMP DEFAULT GETDATE()
)
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ts
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TIMESTAMP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DEFAULT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
GETDATE
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE test ( angle double precision );
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
angle
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
double
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
precision
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE a (
    id VARCHAR(100)
)
COMMENT 'Table comment'
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VARCHAR
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
100
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
COMMENT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'Table comment'
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TABLE a (
    id VARCHAR(100)
)
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VARCHAR
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
100
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TRIGGER foo BEFORE INSERT ON bar EXECUTE PROCEDURE proc(args);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRIGGER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BEFORE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXECUTE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PROCEDURE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
proc
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
args
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TRIGGER foo BEFORE INSERT on bar EXECUTE PROCEDURE proc(args);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRIGGER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BEFORE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXECUTE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PROCEDURE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
proc
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
args
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TRIGGER foo AFTER UPDATE OF bar, baz ON bar EXECUTE PROCEDURE proc(args);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRIGGER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AFTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
baz
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXECUTE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PROCEDURE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
proc
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
args
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TRIGGER foo INSTEAD OF DELETE ON bar FROM baz DEFERRABLE INITIALLY IMMEDIATE FOR EACH ROW EXECUTE PROCEDURE proc(args);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRIGGER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSTEAD
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
baz
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DEFERRABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INITIALLY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IMMEDIATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FOR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EACH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROW
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXECUTE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PROCEDURE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
proc
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
args
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE TRIGGER foo BEFORE INSERT ON bar WHEN (a=b) EXECUTE PROCEDURE proc(args);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRIGGER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BEFORE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
=
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXECUTE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PROCEDURE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
proc
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
args
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE USER foo_user
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
USER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo_user
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE VIEW a
AS
    SELECT
        c
    FROM table1
    INNER JOIN table2 ON (table1.id = table2.id);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VIEW
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
c
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
INNER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
table1
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE VIEW vw_appt_latest AS (
  WITH most_current as (
      SELECT
            da.*
      FROM dim_appt da
      WHERE da.current_appt_id IS NULL
      )
  SELECT * from most_current
);
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REPLACE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VIEW
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
vw_appt_latest
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
most_current
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
      
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
da
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
      
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
dim_appt
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
da
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
      
<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
da
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
current_appt_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
      
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
most_current
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE VIEW IF NOT EXISTS a
AS
    SELECT
        c
    FROM table1
    INNER JOIN table2 ON (table1.id = table2.id)
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VIEW
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXISTS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
c
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
INNER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
table1
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE FUNCTION a() RETURNS integer
AS
'
    SELECT 1;
'
LANGUAGE SQL;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REPLACE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RETURNS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
integer
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
'
    SELECT 1;
'
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LANGUAGE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SQL
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
CREATE FUNCTION a() RETURNS integer
AS
'
    SELECT 1;
'
LANGUAGE SQL;
<end_of_query/>
WordSegment
CREATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FUNCTION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RETURNS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
integer
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AS
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
'
    SELECT 1;
'
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LANGUAGE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SQL
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DELETE FROM table_name
WHERE a > 0;
<end_of_query/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table_name
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
describe table "my_table";
<end_of_query/>
WordSegment
describe
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"my_table"
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Snowflake Double-Dot Notation
-- https://docs.snowflake.com/en/sql-reference/name-resolution.html#resolution-when-schema-omitted-double-dot-notation
SELECT *
FROM my_database..my_table
<end_of_query/>
CommentSegment
-- Snowflake Double-Dot Notation
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://docs.snowflake.com/en/sql-reference/name-resolution.html#resolution-when-schema-omitted-double-dot-notation
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_database
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
my_table
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
    1 as foo,
    2 as "foo",
    3 as """foo""",
    4 as """""foo""""",
    bar,
    "bar",
    """bar""",
    """""bar"""""
from """""a"""""."""""b"""""."""""c"""""
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"foo"
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"""foo"""
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
4
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"""""foo"""""
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
"bar"
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
"""bar"""
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
"""""bar"""""
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"""""a"""""
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"""""b"""""
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"""""c"""""
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP CAST (int AS bool);
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP CAST (int AS bool) RESTRICT;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RESTRICT
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP CAST (int AS bool) CASCADE;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bool
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CASCADE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP CAST (udt_1 AS udt_2);
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
udt_1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
udt_2
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP CAST (sch.udt_1 AS sch.udt_2);
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CAST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
udt_1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
udt_2
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP INDEX IF EXISTS transaction_updated;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INDEX
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXISTS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
transaction_updated
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP INDEX transaction_updated;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INDEX
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
transaction_updated
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP MODEL IF EXISTS model3
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MODEL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXISTS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
model3
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop schema my_schema;
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop schema my_schema cascade;
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cascade
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop schema my_schema restrict;
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
restrict
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop schema if exists my_schema;
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
if
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop schema if exists my_schema cascade;
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
if
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cascade
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop schema if exists my_schema restrict;
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
if
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
restrict
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP SEQUENCE foo;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP SEQUENCE foo.foo;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SEQUENCE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop table a
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop table a cascade
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cascade
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop table a restrict
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
restrict
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop table if exists a
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
if
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP TRIGGER foo;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRIGGER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP TYPE typename;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TYPE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
typename
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP TYPE IF EXISTS typename;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TYPE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IF
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
EXISTS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
typename
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP TYPE typename CASCADE;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TYPE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
typename
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CASCADE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
DROP TYPE typename RESTRICT;
<end_of_query/>
WordSegment
DROP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TYPE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
typename
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RESTRICT
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop view a
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
view
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop view a cascade
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
view
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cascade
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
drop view a restrict
<end_of_query/>
WordSegment
drop
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
view
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
restrict
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM x
WHERE z LIKE '^_f' ESCAPE '^'
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
z
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LIKE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'^_f'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ESCAPE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'^'
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select case when "Spec\"s 23" like 'Spec\'s%' then 'boop' end as field;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
case
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
when
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"Spec\"s 23"
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'Spec\'s%'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
then
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'boop'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
end
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
field
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select 'This shouldn''t fail' as success;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'This shouldn''t fail'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
success
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- This test checks for recursion errors. If the expression
 -- is not parsed correctly it can lead to very deep recursion.

 -- If this test is failing, then check the structure of expression
 -- parsing.

 select
        1
    from
        test_table
    where
        test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%' --5
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%' -- 10
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%' -- 15
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%' -- 20
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%' --30
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%'
        or test_table.string_field like 'some string%' -- 40
<end_of_query/>
CommentSegment
-- This test checks for recursion errors. If the expression
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- is not parsed correctly it can lead to very deep recursion.
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- If this test is failing, then check the structure of expression
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- parsing.
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
from
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
test_table
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
where
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
--5
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- 10
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- 15
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- 20
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
--30
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
or
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
string_field
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
like
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'some string%'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- 40
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- This test checks for recursion errors. If the expression
 -- is not parsed correctly it can lead to very deep recursion.

 -- If this test is failing, then check the structure of expression
 -- parsing.

 SELECT * FROM t WHERE a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b AND a < b
<end_of_query/>
CommentSegment
-- This test checks for recursion errors. If the expression
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- is not parsed correctly it can lead to very deep recursion.
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- If this test is failing, then check the structure of expression
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- parsing.
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM counter
FETCH FIRST 10 ROWS ONLY
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
counter
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FETCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FIRST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
10
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ONLY
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    DATE(t), ROUND(b, 2),
    LEFT(right(s, 5), LEN(s + 6)) as compound
FROM tbl_b;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
DATE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROUND
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
LEFT
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
right
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
s
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LEN
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
s
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
6
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
compound
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl_b
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT _custom_function(5) as test_column;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
_custom_function
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test_column
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Thanks @mrshu for this query, it tests nested functions
SELECT
    SPLIT(LOWER(text), ' ') AS text
FROM "database"."sample_table"
<end_of_query/>
CommentSegment
-- Thanks @mrshu for this query, it tests nested functions
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SPLIT
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
LOWER
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
text
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
' '
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
text
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"database"
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"sample_table"
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
grant all on mytable to public
<end_of_query/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
all
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
to
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
grant all on table mytable to myrole
<end_of_query/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
all
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
to
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
myrole
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
grant all privileges on mytable to myrole
<end_of_query/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
all
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
privileges
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
to
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
myrole
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
GRANT INSERT ON my_table, my_table2 TO public;
<end_of_query/>
WordSegment
GRANT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
GRANT INSERT ON my_table, my_table2 TO "public";
<end_of_query/>
WordSegment
GRANT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"public"
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
GRANT INSERT, UPDATE ON my_table, my_table2 TO public;
<end_of_query/>
WordSegment
GRANT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
GRANT INSERT, UPDATE ON my_table, my_table2 TO "public";
<end_of_query/>
WordSegment
GRANT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"public"
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
GRANT INSERT, UPDATE, DELETE ON my_table, my_table2 TO public;
<end_of_query/>
WordSegment
GRANT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
GRANT INSERT, UPDATE, DELETE ON my_table, my_table2 TO "public";
<end_of_query/>
WordSegment
GRANT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"public"
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
GRANT INSERT, UPDATE, DELETE, SELECT ON my_table, my_table2 TO public;
<end_of_query/>
WordSegment
GRANT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
GRANT INSERT, UPDATE, DELETE, SELECT ON my_table, my_table2 TO "public";
<end_of_query/>
WordSegment
GRANT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"public"
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
grant select (col1, col2), update (col1) on mytable to public
<end_of_query/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
col1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col2
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
update
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
col1
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
to
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
grant select on mytable to public
<end_of_query/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
to
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
grant select on mytable to public with grant option
<end_of_query/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
to
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
with
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
option
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
grant select, update, insert on mytable to public
<end_of_query/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
select
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
update
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
insert
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
to
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
grant update on all tables in schema a to public
<end_of_query/>
WordSegment
grant
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
update
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
all
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tables
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
in
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
to
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
public
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    status
FROM
    orders
GROUP BY
    status
FETCH FIRST 3 ROWS ONLY
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
status
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
GROUP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
status
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FETCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FIRST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ONLY
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
	house_id,
	COUNT (person_id)
FROM
	persons
GROUP BY
	house_id
HAVING
	COUNT (person_id) > 10
FETCH FIRST 30 ROWS ONLY
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
	
<end_of_token/>
WordSegment
house_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
	
<end_of_token/>
WordSegment
COUNT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
person_id
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
	
<end_of_token/>
WordSegment
persons
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
GROUP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
	
<end_of_token/>
WordSegment
house_id
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
HAVING
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
	
<end_of_token/>
WordSegment
COUNT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
person_id
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
10
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FETCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FIRST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
30
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ONLY
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
INSERT into tbl_b (col1) values (123);
<end_of_query/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
into
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl_b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
col1
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
values
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
123
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
INSERT INTO tbl_c (
    SELECT *
    FROM table1
);
<end_of_query/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl_c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
INSERT INTO mytable
DEFAULT VALUES;
<end_of_query/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
DEFAULT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VALUES
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
INSERT INTO foo SELECT 0 AS bar;
<end_of_query/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
INSERT INTO foo (SELECT 1 AS bar);
<end_of_query/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
INSERT INTO foo ((SELECT 1 AS bar));
<end_of_query/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
INSERT INTO table2 (column1, column2, column3)
WITH mycte AS (
    SELECT
        foo,
        bar
    FROM mytable1
)

SELECT
    foo,
    bar,
    baz
FROM mycte;
<end_of_query/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
column1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column3
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- https://github.com/sqlfluff/sqlfluff/issues/828
-- https://github.com/sqlfluff/sqlfluff/issues/842
-- https://www.postgresql.org/docs/9.0/functions-matching.html#FUNCTIONS-LIKE
SELECT *
FROM my_tbl
WHERE a !~ '[a-z]'
AND d !~~* '[a-z]'
AND b LIKE 'Spec\'s%'
AND c !~* '^([0-9]){1,}(\.)([0-9]{1,})$'
<end_of_query/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/828
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/842
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://www.postgresql.org/docs/9.0/functions-matching.html#FUNCTIONS-LIKE
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_tbl
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
!~
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'[a-z]'
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
d
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
!~~*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'[a-z]'
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LIKE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'Spec\'s%'
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
ComparisonOperatorSegment
!~*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'^([0-9]){1,}(\.)([0-9]{1,})$'
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Merge using Table
MERGE INTO t USING u ON (a = b)
WHEN MATCHED THEN
UPDATE SET a = b
WHEN NOT MATCHED THEN
INSERT (b) VALUES (c);
<end_of_query/>
CommentSegment
-- Merge using Table
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
MERGE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
USING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
u
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VALUES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Merge using Select
MERGE INTO t USING (SELECT * FROM u) AS u ON (a = b)
WHEN MATCHED THEN
UPDATE SET a = b
WHEN NOT MATCHED THEN
INSERT (b) VALUES (c);
<end_of_query/>
CommentSegment
-- Merge using Select
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
MERGE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
USING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
u
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
u
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VALUES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Merge using Delete
MERGE INTO t USING u ON (a = b)
WHEN MATCHED THEN
UPDATE SET a = b
WHEN MATCHED THEN DELETE;
<end_of_query/>
CommentSegment
-- Merge using Delete
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
MERGE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
USING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
u
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Merge using multiple operations
MERGE INTO t USING u ON (a = b)
WHEN MATCHED AND a > b THEN
UPDATE SET a = b
WHEN MATCHED AND ( a < b AND c < d ) THEN DELETE
WHEN NOT MATCHED THEN INSERT (a, c) VALUES (b, d);
<end_of_query/>
CommentSegment
-- Merge using multiple operations
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
MERGE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
USING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
u
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
d
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DELETE
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
MATCHED
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
VALUES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
d
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    CASE
        WHEN (year_number % 400 = 0)
            OR (year_number % 4 = 0 AND year_number % 100 != 0)
            THEN TRUE ELSE FALSE
    END AS is_leap_year
FROM mytable
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CASE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
year_number
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
%
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
400
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
OR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
year_number
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
%
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
4
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
year_number
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
%
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
100
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
!
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ELSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
END
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
is_leap_year
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select a from tbl1  /*comment here*/ ;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl1
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
CommentSegment
/*comment here*/
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
/*and here*/  select b from tbl2;   -- trailling ending comment
<end_of_query/>
CommentSegment
/*and here*/
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl2
<end_of_token/>
CodeSegment
;
<end_of_token/>
WhitespaceSegment
   
<end_of_token/>
CommentSegment
-- trailling ending comment
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
# COMMENT
-- Another Comment
Select A from Sys.dual where a
-- inline comment
in  ('RED',  /* Inline */  'GREEN','BLUE');
<end_of_query/>
CommentSegment
# COMMENT
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- Another Comment
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
Select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
A
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
Sys
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
dual
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
where
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- inline comment
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
in
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
'RED'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
CommentSegment
/* Inline */
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
CodeSegment
'GREEN'
<end_of_token/>
CodeSegment
,
<end_of_token/>
CodeSegment
'BLUE'
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select * from tbl_b; # as another comment
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl_b
<end_of_token/>
CodeSegment
;
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
# as another comment
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
insert into sch.tbl_b
    (col1)
values (123);
<end_of_query/>
WordSegment
insert
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
into
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
tbl_b
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
col1
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
values
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
123
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
with tmp as (
    select * from  blah
)
select a, b from tmp;
<end_of_query/>
WordSegment
with
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tmp
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
blah
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tmp
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
# And that's the end
<end_of_query/>
CommentSegment
# And that's the end
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
    *
from boo;
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
boo
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
WITH blah AS (select x,y,4.567 FROM foo) select z, y, x from blah;
<end_of_query/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
blah
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
CodeSegment
,
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
,
<end_of_token/>
LiteralSegment
4.567
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
z
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
blah
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- A valid identifier is alphanumeric and contains at least one letter.
select "a" as 0_is_a_legal_identifier;
<end_of_query/>
CommentSegment
-- A valid identifier is alphanumeric and contains at least one letter.
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"a"
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
0_is_a_legal_identifier
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select "a" as 00_is_a_legal_identifier;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"a"
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
00_is_a_legal_identifier
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select 123_is_a_legal_identifier.456_is_a_legal_identifier;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
123_is_a_legal_identifier
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
456_is_a_legal_identifier
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select "a" as 0is_a_legal_identifier;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"a"
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
0is_a_legal_identifier
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select _s00.45_is_a_legal_identifier from sdf9_._234awdf;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
_s00
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
45_is_a_legal_identifier
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sdf9_
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
_234awdf
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select "a" as is_a_legal_identifier0;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"a"
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
is_a_legal_identifier0
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
#space before from is non-breaking space
SELECT a,b, c  from sch."blah"
<end_of_query/>
CommentSegment
#space before from is non-breaking space
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
,
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"blah"
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    1,
    1.2,
    1.,
    .2,
    1e3,
    1E3,
    1.2e+3,
    1.2E+3,
    1.e-3,
    1.E-3,
    .2e3,
    .2E3
;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1.2
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1.
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
.2
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1e3
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1E3
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1.2e+3
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1.2E+3
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1.e-3
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1.E-3
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
.2e3
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
.2E3
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
revoke select on table a from group b
<end_of_query/>
WordSegment
revoke
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
group
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
rollback
<end_of_query/>
WordSegment
rollback
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
rollback and no chain
<end_of_query/>
WordSegment
rollback
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
and
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
no
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
chain
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
rollback work
<end_of_query/>
WordSegment
rollback
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
work
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
rollback work and no chain
<end_of_query/>
WordSegment
rollback
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
work
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
and
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
no
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
chain
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select a,b, c from sch."blah"
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
,
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"blah"
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- https://github.com/sqlfluff/sqlfluff/issues/827

SELECT
  a AND NOT i.b
FROM i
<end_of_query/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/827
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
i
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
i
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select * from foo JOIN bar ON (foo.a = bar.a)
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
    c1 & c2,
    c3 | c4,
    c5 ^ c6,
    c7 << c8,
    c9 >> c10
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
&
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c2
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
|
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c4
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
^
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c6
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c7
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c8
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
c9
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
CodeSegment
>
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c10
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Thanks @mrshu for this query, it tests functions and order by
SELECT
    col_a,
    col_b,
    date_col_a,
    date_col_b
FROM "database"."sample_table"
WHERE
    DATE(date_col_b) >= current_date
    AND length(col_a) = 4
ORDER BY date_col_a DESC NULLS LAST
<end_of_query/>
CommentSegment
-- Thanks @mrshu for this query, it tests functions and order by
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col_a
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col_b
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
date_col_a
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
date_col_b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"database"
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"sample_table"
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
DATE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
date_col_b
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
current_date
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
length
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
col_a
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
4
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
date_col_a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DESC
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULLS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LAST
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    CASE WHEN 1 = 2 THEN 3
    WHEN 4 > 3 THEN 5 + 2
    WHEN some_var IN (1,2,3) then "nothing"
    ELSE "boo"
    END as a_case_statement
FROM boo
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CASE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
4
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
some_var
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
,
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
,
<end_of_token/>
LiteralSegment
3
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
then
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"nothing"
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ELSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
"boo"
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
END
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a_case_statement
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
boo
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    CASE some_var
    WHEN 'hello' THEN 3
    WHEN 'hi' THEN 12
    ELSE 0
    END as a_case_statement
FROM boo
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CASE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
some_var
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'hello'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'hi'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
12
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ELSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
END
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a_case_statement
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
boo
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
    col0,
    case
        when col1
        then col2
        else col3
    end::text as mycol
from table1;
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col0
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
case
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
when
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
then
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col2
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
else
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col3
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
end
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
text
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycol
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
    col0,
    case
        when col1
        then col2
        else col3
    end::int::float as mycol
from table1;
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col0
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
case
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
when
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
then
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col2
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
else
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col3
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
end
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
int
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
float
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycol
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
    col0,
    cast(case
        when col1
        then col2
        else col3
    end as text) as mycol
from table1;
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col0
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
cast
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
case
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
when
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
then
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col2
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
else
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col3
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
end
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
text
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycol
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    column1,
    CASE
        WHEN 'test' THEN 12
        ELSE 0
    END >= 0
FROM boo;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
column1
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CASE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'test'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
12
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
ELSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
END
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
boo
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- https://github.com/sqlfluff/sqlfluff/issues/871
WITH constants AS (
    SELECT 8760 AS hours_per_year
)

SELECT
    table1.name,
    foo.name,
    foo.value * constants.hours_per_year AS some_value
FROM table1
CROSS JOIN
    constants
JOIN table2 AS foo USING (id)
<end_of_query/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/871
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
constants
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
8760
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
hours_per_year
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
table1
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
name
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
name
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
value
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
constants
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
hours_per_year
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
some_value
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
CROSS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
constants
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
USING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
id
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    col_a,
    col_b
FROM some_table
WHERE col_a IS NOT NULL
AND col_b NOT IN (SELECT c FROM another_table)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col_a
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col_b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
some_table
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col_a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col_b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
another_table
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Union expressions
SELECT
    col_a as foo
FROM some_table

UNION

SELECT
    col_b as foo
FROM another_table

UNION ALL

SELECT
    col_c as foo
FROM this_other_table

INTERSECT

SELECT
    col_d as foo
FROM the_last_table
<end_of_query/>
CommentSegment
-- Union expressions
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col_a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
some_table
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col_b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
another_table
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col_c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
this_other_table
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INTERSECT
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
col_d
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
the_last_table
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1
EXCEPT
SELECT 2
;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
EXCEPT
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1
EXCEPT ALL
SELECT 2
;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
EXCEPT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Test the parser on complex maths
SELECT
    COS(2*ACOS(-1)*2*y/53) AS c2
FROM
    t
<end_of_query/>
CommentSegment
-- Test the parser on complex maths
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
COS
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
*
<end_of_token/>
WordSegment
ACOS
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
-
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
*
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
*
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
/
<end_of_token/>
LiteralSegment
53
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c2
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
t
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    EMPLOYEE.EMPNO
FROM
    EMPLOYEE
FETCH FIRST 3 ROWS ONLY
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
EMPLOYEE
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
EMPNO
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
EMPLOYEE
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FETCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FIRST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ONLY
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT myfn([1, 2, 3])
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
myfn
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
[
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
CodeSegment
]
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT column_name FROM table_name WHERE period1 OVERLAPS period2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column_name
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table_name
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
period1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OVERLAPS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
period2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    COALESCE(id, 1)
FROM some_table
GROUP BY COALESCE(id, 1)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
COALESCE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
id
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
some_table
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
GROUP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
COALESCE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
id
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- More complex select clause without from clause
SELECT
    NULL::INT AS user_id,
    NULL::INT AS is_paid
LIMIT 0
<end_of_query/>
CommentSegment
-- More complex select clause without from clause
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
user_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
is_paid
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- More complex select clause without from clause
SELECT
    NULL::INT AS user_id,
    NULL::INT AS is_paid
FETCH FIRST 0 ROWS ONLY
<end_of_query/>
CommentSegment
-- More complex select clause without from clause
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
user_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
NULL
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
is_paid
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FETCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FIRST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ONLY
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    DATE(zendesk.created_at, 'America/New_York') AS date,
    COUNT(
        CASE
        WHEN zendesk.support_team IN ('tech support', 'taskus', 'onc') THEN 1
        END
    ) AS tech_support
FROM
    zendesk
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
DATE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
zendesk
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
created_at
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'America/New_York'
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
date
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
COUNT
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
CASE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
zendesk
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
support_team
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
'tech support'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'taskus'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'onc'
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
END
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tech_support
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
zendesk
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
with a as (

    select *
    from table_a

),

/*
    select
*/

b as (

    select *
    from a

)

select *
from b
<end_of_query/>
WordSegment
with
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table_a
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
/*
    select
*/
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1
INTERSECT
SELECT 2
;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INTERSECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 1
INTERSECT ALL
SELECT 2
;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INTERSECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Aliasing without AS
-- https://github.com/sqlfluff/sqlfluff/issues/149
SELECT
    (POW(sd2,2) + POW(sd3,2) + POW(sd4,2) + POW(sd4,2)) w1
FROM
    dat;
<end_of_query/>
CommentSegment
-- Aliasing without AS
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/149
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
POW
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
sd2
<end_of_token/>
CodeSegment
,
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
POW
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
sd3
<end_of_token/>
CodeSegment
,
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
POW
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
sd4
<end_of_token/>
CodeSegment
,
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
POW
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
sd4
<end_of_token/>
CodeSegment
,
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
w1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
dat
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Another Aliasing without AS
SELECT
    CASE
      WHEN order_month = max_month THEN 1
    ELSE
    0
  END
    churn
<end_of_query/>
CommentSegment
-- Another Aliasing without AS
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CASE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
      
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
order_month
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
max_month
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ELSE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
END
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
churn
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Nested scalar query
-- https://github.com/sqlfluff/sqlfluff/issues/147
SELECT
  a
FROM
  dat
WHERE
  c >= (SELECT 1)
<end_of_query/>
CommentSegment
-- Nested scalar query
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/147
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
dat
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- On clause without brackets
-- https://github.com/sqlfluff/sqlfluff/issues/146
SELECT
    a
FROM
    zendesk
LEFT JOIN
    ticket
ON
    zendesk.ticket_id = ticket.id;
<end_of_query/>
CommentSegment
-- On clause without brackets
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/146
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
zendesk
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ticket
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ON
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
zendesk
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
ticket_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ticket
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    low_user_counts
FROM
    acceptable_buckets
JOIN
    small_buckets
ON
    (business_type = low_business_type)
    AND (business_type = low_business_type
        OR size_label = low_size_label);
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
low_user_counts
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
acceptable_buckets
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
JOIN
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
small_buckets
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ON
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
business_type
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
low_business_type
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
business_type
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
low_business_type
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
OR
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
size_label
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
low_size_label
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM a as foo JOIN b JOIN c as foobar JOIN d, e as bar JOIN f JOIN g('blah') as tbl_func JOIN h, baz as buzz;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foobar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
d
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
e
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
g
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
'blah'
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl_func
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
h
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
baz
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
buzz
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
 c.f1 as f1
 , co.f2 as f2
 , po.f3 as f3
 , c2c.f4 as f4
 , c_ph.f5 as f5
FROM t1 AS c
LEFT JOIN t2 AS co
 ON c.f1 = co.f1
LEFT JOIN t3 AS po
 ON c.f1 = po.f1
LEFT JOIN (
 SELECT t._tmp as _tmp
 FROM (SELECT * FROM t4) AS t
) AS l_ccc
 ON c.f1 = l_ccc._tmp
LEFT JOIN t5 AS cc
 ON l_ccc._tmp = cc.f1
LEFT JOIN (
     (
         SELECT t._tmp AS _tmp
         FROM (SELECT * FROM t6) AS t
     ) AS l_c2c_c
     LEFT JOIN (
         SELECT a1._tmp AS _tmp
           , h.id
           , h.f1
         FROM (
           SELECT t.id
             , t.f4

           FROM (SELECT * FROM t7) AS t) AS h
       LEFT JOIN (SELECT * FROM t8) AS a1
                 ON a1.id = h.id
     ) AS c2c
             ON l_c2c_c._tmp = c2c.id
)
ON c.f1 = l_c2c_c._tmp
LEFT JOIN t9 AS c_ph
 ON c.f1 = c_ph.f1;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
co
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f2
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
po
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f3
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c2c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f4
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f4
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c_ph
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f5
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
co
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
co
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
po
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
po
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t4
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
l_ccc
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
l_ccc
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cc
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
l_ccc
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cc
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
     
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
         
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
         
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t6
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
     
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
l_c2c_c
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
     
<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
         
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a1
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
           
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
h
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
           
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
h
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
         
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
           
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
             
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f4
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
           
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t7
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
h
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
       
<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t8
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a1
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
h
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
     
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c2c
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
             
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
l_c2c_c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c2c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
l_c2c_c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
_tmp
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t9
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c_ph
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
c_ph
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
f1
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT item, purchases, category, LAST_VALUE(item)
  OVER (d) AS most_popular
FROM Produce
WINDOW
  a AS (PARTITION BY category),
  b AS (a ORDER BY purchases),
  c AS (b ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING),
  d AS (c)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
item
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
purchases
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
category
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LAST_VALUE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
item
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
OVER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
d
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
most_popular
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
Produce
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WINDOW
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
PARTITION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
category
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
purchases
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BETWEEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PRECEDING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FOLLOWING
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
d
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Full Join
-- https://github.com/sqlfluff/sqlfluff/issues/144
SELECT
    exists_left.business_type AS business_type_left,
    exists_right.business_type AS business_type_right
FROM
    benchmark_summaries AS exists_left
FULL JOIN
    business_types AS exists_right
ON
    exists_left.business_type = exists_right.business_type
<end_of_query/>
CommentSegment
-- Full Join
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/144
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
exists_left
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
business_type
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
business_type_left
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
exists_right
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
business_type
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
business_type_right
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
benchmark_summaries
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists_left
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
business_types
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists_right
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ON
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
exists_left
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
business_type
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
exists_right
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
business_type
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT AVG(col) OVER(win) FROM table WINDOW win AS (PARTITION BY date)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AVG
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
col
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OVER
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
win
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WINDOW
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
win
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
PARTITION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
date
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    NTH_VALUE(bar, 1) OVER w1 AS baz
FROM t
WINDOW w1 AS (
    PARTITION BY
        x,
        y,
        z
    ORDER BY abc DESC
)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
NTH_VALUE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OVER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
w1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WINDOW
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
w1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
PARTITION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
x
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
z
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
abc
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DESC
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    NTH_VALUE(bar, 1) OVER(w1) AS baz,
    NTH_VALUE(bar, 1) OVER() AS foo
FROM t
WINDOW w1 AS (
    PARTITION BY
        x,
        y,
        z
    ORDER BY abc DESC
)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
NTH_VALUE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OVER
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
w1
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
baz
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
NTH_VALUE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OVER
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WINDOW
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
w1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
PARTITION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
x
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
z
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
abc
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DESC
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT item, purchases, category, LAST_VALUE(item)
  OVER (c) AS most_popular
FROM Produce
WINDOW
  a AS (PARTITION BY category),
  b AS (ORDER BY purchases),
  c AS (ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
item
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
purchases
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
category
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LAST_VALUE
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
item
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
OVER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
most_popular
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
Produce
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WINDOW
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
PARTITION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
category
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
purchases
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
c
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BETWEEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
PRECEDING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FOLLOWING
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM table1
NATURAL JOIN table2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
NATURAL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM table1
NATURAL INNER JOIN table2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
NATURAL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INNER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM table1
NATURAL LEFT JOIN table2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
NATURAL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM table1
NATURAL LEFT OUTER JOIN table2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
NATURAL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OUTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM table1
NATURAL RIGHT JOIN table2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
NATURAL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RIGHT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM table1
NATURAL RIGHT OUTER JOIN table2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
NATURAL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RIGHT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OUTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM table1
NATURAL FULL JOIN table2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
NATURAL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM table1
NATURAL FULL OUTER JOIN table2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
NATURAL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OUTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- query with no brackets
select
    orders.order_id AS order_id,
    customers.email AS email
from
    orders
    join customers on(
        (
            customers.customer_id = orders.customer_id
        )
    )
where
    (customers.email = 'sample@gmail.com')
group by
    orders.order_id,
    customers.email
order by
    orders.order_id;
<end_of_query/>
CommentSegment
-- query with no brackets
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
email
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
join
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
customers
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
customer_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
customer_id
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
where
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'sample@gmail.com'
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
group
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
by
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
order
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
by
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- nested bracketed up to 1 levels
select
    orders.order_id AS order_id,
    customers.email AS email
from
    (
        orders
        join customers on(
            (
                customers.customer_id = orders.customer_id
            )
        )
    )
where
    (customers.email = 'sample@gmail.com')
group by
    orders.order_id,
    customers.email
order by
    orders.order_id;
<end_of_query/>
CommentSegment
-- nested bracketed up to 1 levels
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
email
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
orders
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
join
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
customers
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
customer_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
customer_id
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
where
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'sample@gmail.com'
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
group
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
by
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
order
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
by
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- nested bracketed up to 2 levels
select
    orders.order_id AS order_id,
    customers.email AS email
from
    (
        (
            orders
            join customers on(
                (
                    customers.customer_id = orders.customer_id
                )
            )
        )
        join products on(
            (products.product_id = orders.product_id)
        )
    )
where
    (customers.email = 'sample@gmail.com')
group by
    orders.order_id,
    customers.email
order by
    orders.order_id;
<end_of_query/>
CommentSegment
-- nested bracketed up to 2 levels
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
email
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
orders
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
join
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
customers
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
customer_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
customer_id
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
join
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
products
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
products
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
product_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
product_id
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
where
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'sample@gmail.com'
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
group
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
by
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
order
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
by
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- nested bracketed up to 3 levels
select
    orders.order_id AS order_id,
    customers.email AS email
from
    (
        (
            (
                orders
                join customers on(
                    (
                        customers.customer_id = orders.customer_id
                    )
                )
            )
            join products on(
                (products.product_id = orders.product_id)
            )
        )
        join random on(
            (random.product_id = products.product_id)
        )
    )
where
    (customers.email = 'sample@gmail.com')
group by
    orders.order_id,
    customers.email
order by
    orders.order_id;
<end_of_query/>
CommentSegment
-- nested bracketed up to 3 levels
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
email
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
WordSegment
orders
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
WordSegment
join
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
customers
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                    
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                        
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
customer_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
customer_id
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
join
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
products
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
products
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
product_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
product_id
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
join
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
random
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
on
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
random
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
product_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
products
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
product_id
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
where
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'sample@gmail.com'
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
group
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
by
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
customers
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
email
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
order
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
by
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
orders
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
order_id
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    1e-9,
    -12.345e12,
    .0123E-6,
    25,
    +6.34,
    0.5,
    25e-03,
    -1,
    25,
    -col1,
    -+-col2
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1e-9
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
-
<end_of_token/>
LiteralSegment
12.345e12
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
.0123E-6
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
25
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
+
<end_of_token/>
LiteralSegment
6.34
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
0.5
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
25e-03
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
-
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
25
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
-
<end_of_token/>
WordSegment
col1
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
-
<end_of_token/>
CodeSegment
+
<end_of_token/>
CodeSegment
-
<end_of_token/>
WordSegment
col2
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Between and Not Between
-- https://github.com/sqlfluff/sqlfluff/issues/142
-- https://github.com/sqlfluff/sqlfluff/issues/478
-- https://github.com/sqlfluff/sqlfluff/issues/2845
SELECT
    business_type
FROM
    benchmark_summaries
WHERE
    avg_click_rate NOT BETWEEN 0 and 1 + 1 + some_value
    AND some_other_thing BETWEEN 0 - 1 * another_value and 1
    AND another_thing BETWEEN -another_value and 0
<end_of_query/>
CommentSegment
-- Between and Not Between
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/142
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/478
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/2845
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
business_type
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
benchmark_summaries
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
avg_click_rate
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BETWEEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
and
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
some_value
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
some_other_thing
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BETWEEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
another_value
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
and
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
another_thing
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BETWEEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WordSegment
another_value
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
and
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    EMPLOYEE.EMPNO
FROM
    EMPLOYEE
ORDER BY
    SALARY DESC
FETCH FIRST 3 ROWS ONLY
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
EMPLOYEE
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
EMPNO
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
EMPLOYEE
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SALARY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DESC
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FETCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FIRST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ONLY
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT (DATE '2001-02-16', DATE '2001-12-21')
OVERLAPS (DATE '2001-10-30', DATE '2002-10-30');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
DATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'2001-02-16'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'2001-12-21'
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
OVERLAPS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
DATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'2001-10-30'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'2002-10-30'
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Case and Extract Expressions
-- https://github.com/sqlfluff/sqlfluff/issues/143
SELECT
    CAST(25.65 AS int),
    SAFE_CAST(NULL AS STRING) AS age_label,
    EXTRACT(day FROM end_time) AS day
FROM
    benchmark_with_performance
<end_of_query/>
CommentSegment
-- Case and Extract Expressions
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/143
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
CAST
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
25.65
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
int
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SAFE_CAST
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
NULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
STRING
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
age_label
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
EXTRACT
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
day
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
end_time
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
day
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
benchmark_with_performance
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Unexpected Join Fail
-- https://github.com/sqlfluff/sqlfluff/issues/163
SELECT
    data.id
FROM
    data
JOIN
    data_max
ON
    data.event_id = data_max.event_id
LEFT JOIN
    "other_db"."other_data" AS od
ON
    od.fid = data_max.fid
<end_of_query/>
CommentSegment
-- Unexpected Join Fail
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/163
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
data
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
id
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
data
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
JOIN
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
data_max
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ON
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
data
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
event_id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
data_max
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
event_id
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
"other_db"
<end_of_token/>
CodeSegment
.
<end_of_token/>
CodeSegment
"other_data"
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
od
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ON
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
od
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
fid
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
data_max
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
fid
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Union All in a With
-- https://github.com/sqlfluff/sqlfluff/issues/162
WITH result AS (
    SELECT
        customer
    FROM sales_eu AS s
    UNION ALL
    SELECT
        customer
    FROM sales_us AS s2
)

SELECT * FROM result
<end_of_query/>
CommentSegment
-- Union All in a With
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/162
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
result
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
customer
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sales_eu
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
s
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
customer
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sales_us
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
s2
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
result
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT column_name
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column_name
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
RIGHT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
column_name
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
column_name
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Array notation (BigQuery and Postgres)
-- https://github.com/sqlfluff/sqlfluff/issues/59
SELECT
  user_id,
  list_id,
  (count_18_24 * bits[OFFSET(0)] + count_25_34 * bits[OFFSET(1)] +
   count_35_44 * bits[OFFSET(2)] + count_45_54 * bits[OFFSET(3)] +
   count_55_64 * bits[OFFSET(4)] + count_65_plus * bits[OFFSET(5)]) / audience_size AS relative_abundance
FROM
    gcp_project.dataset.audience_counts_gender_age
<end_of_query/>
CommentSegment
-- Array notation (BigQuery and Postgres)
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/59
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
user_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
list_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
count_18_24
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bits
<end_of_token/>
CodeSegment
[
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
0
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
]
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
count_25_34
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bits
<end_of_token/>
CodeSegment
[
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
]
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
   
<end_of_token/>
WordSegment
count_35_44
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bits
<end_of_token/>
CodeSegment
[
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
]
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
count_45_54
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bits
<end_of_token/>
CodeSegment
[
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
3
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
]
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
   
<end_of_token/>
WordSegment
count_55_64
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bits
<end_of_token/>
CodeSegment
[
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
4
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
]
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
count_65_plus
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bits
<end_of_token/>
CodeSegment
[
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
]
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
/
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
audience_size
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
relative_abundance
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
gcp_project
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
dataset
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
audience_counts_gender_age
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM foo TABLESAMPLE BERNOULLI (10)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLESAMPLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BERNOULLI
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
10
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT f.colname
FROM foo AS f TABLESAMPLE BERNOULLI (10)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
colname
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLESAMPLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BERNOULLI
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
10
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM foo TABLESAMPLE BERNOULLI (10) REPEATABLE (100)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLESAMPLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BERNOULLI
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
10
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REPEATABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
100
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT col1, col2
FROM foo TABLESAMPLE BERNOULLI (10)
ORDER BY col1
LIMIT 100
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col2
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLESAMPLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BERNOULLI
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
10
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
col1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
100
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM foo TABLESAMPLE SYSTEM (10)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLESAMPLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SYSTEM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
10
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT f.colname
FROM foo AS f TABLESAMPLE SYSTEM (10)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
colname
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
f
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLESAMPLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SYSTEM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
10
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM foo TABLESAMPLE SYSTEM (10) REPEATABLE (100)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLESAMPLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SYSTEM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
10
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
REPEATABLE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
100
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select 1
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select * from blah
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
blah
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select * from foo, bar
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select 12 -- ends with comment
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
12
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CommentSegment
-- ends with comment
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    my_var::date as casted_variable,
    123::bigint as another_casted_number
FROM boo
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
my_var
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
date
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
casted_variable
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
123
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
bigint
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
another_casted_number
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
boo
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- test some more advanced constructs
SELECT
    a, b
FROM boo
GROUP BY 1
ORDER BY b, 1
LIMIT 5
<end_of_query/>
CommentSegment
-- test some more advanced constructs
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
boo
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
GROUP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Having Clause
SELECT
    id
FROM test
WHERE
    id >= 4
GROUP BY id
HAVING id < 5
<end_of_query/>
CommentSegment
-- Having Clause
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
id
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
test
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
>
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
4
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
GROUP
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
id
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
HAVING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- test window functions in functions with casting
SELECT
    DATEADD(DAY, ROW_NUMBER() OVER (ORDER BY DateCD ASC), '2014-01-01') AS dt
FROM boo
<end_of_query/>
CommentSegment
-- test window functions in functions with casting
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
DATEADD
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
DAY
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROW_NUMBER
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OVER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DateCD
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ASC
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'2014-01-01'
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
dt
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
boo
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- test aliasing
SELECT
    raw_column,
    raw_sch.raw_col,
    simple_explicit as aliased_column_1,
    simple_implicit aliased_column_2,
    an_unaliased + calculation,
    -- We know that the following one doesn't parse...
    -- an_implicitly + aliased calculation,
    an_explicitly - aliased as calculation,
    'an unalised string',
    123.6,
    -786 as aliased_column3
FROM unaliased
JOIN aliased_1 as foo
JOIN aliased_2 bar USING(b)
<end_of_query/>
CommentSegment
-- test aliasing
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
raw_column
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
raw_sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
raw_col
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
simple_explicit
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
aliased_column_1
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
simple_implicit
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
aliased_column_2
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
an_unaliased
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
+
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
calculation
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CommentSegment
-- We know that the following one doesn't parse...
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CommentSegment
-- an_implicitly + aliased calculation,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
an_explicitly
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
aliased
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
calculation
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
'an unalised string'
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
123.6
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
-
<end_of_token/>
LiteralSegment
786
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
aliased_column3
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
unaliased
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
aliased_1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
aliased_2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
USING
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
b
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- test parsing of cross join and outer join
SELECT
    count_correctly_substituted
FROM
    correctly_substituted
CROSS JOIN
    needs_substitution
LEFT OUTER JOIN
    some_other_table
<end_of_query/>
CommentSegment
-- test parsing of cross join and outer join
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
count_correctly_substituted
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
correctly_substituted
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
CROSS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
needs_substitution
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LEFT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OUTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
some_other_table
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    *
FROM
    TABLE_1
    FULL OUTER JOIN  -- comment1
    (
        SELECT
            *
        FROM Table_B
        WHERE COL_2 = 'B'
        UNION ALL
        SELECT
            *
        FROM TABLE_C
        WHERE
            COL_1 = 0
    )
ON TABLE_1.A = TABLE_2.A
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
TABLE_1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FULL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OUTER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
CommentSegment
-- comment1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
Table_B
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
COL_2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'B'
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE_C
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
WHERE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
COL_1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ON
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE_1
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
A
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TABLE_2
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
A
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select 1 from group;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
group
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select 1 from groups;
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
groups
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    user_id,
FROM
    table
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
user_id
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
table
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- https://github.com/sqlfluff/sqlfluff/issues/874
SELECT TRUE AND NOT FALSE;
<end_of_query/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/874
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT TRUE;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT TRUE AND FALSE;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT NOT TRUE;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT NOT TRUE AND FALSE;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NOT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AND
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
    substring(a from 'abc') as b
from my_table
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
substring
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'abc'
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_table
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
  0
UNION
SELECT
  1
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
LiteralSegment
1
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
  0
UNION ALL
SELECT
  1
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
LiteralSegment
1
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
(SELECT 0) UNION (SELECT 1);
<end_of_query/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
((SELECT 0)) UNION ((SELECT 1));
<end_of_query/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
(
    SELECT * FROM tbl1
    EXCEPT
    SELECT * FROM tbl2
)
UNION
(
    SELECT * FROM tbl2
    EXCEPT
    SELECT * FROM tbl1
);
<end_of_query/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
EXCEPT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl2
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl2
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
EXCEPT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
  0
UNION DISTINCT
SELECT
  1
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
DISTINCT
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
LiteralSegment
1
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- Test Nested WITH
WITH counter AS (
  WITH ladder AS (
    SELECT 1
  )
  SELECT *
  FROM ladder
  ORDER BY 1
)
SELECT *
FROM counter
<end_of_query/>
CommentSegment
-- Test Nested WITH
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
counter
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ladder
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ladder
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
counter
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    user_id
FROM
    t
WHERE
    1 IN UNNEST(t.c)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
user_id
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
t
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
IN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UNNEST
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
c
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
WITH cte as (select a from tbla)
select a from cte
<end_of_query/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cte
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbla
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cte
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
WITH blah AS (select x,y,z FROM foo) select z, y, x from blah;
<end_of_query/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
blah
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
CodeSegment
,
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
,
<end_of_token/>
WordSegment
z
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
z
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
x
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
blah
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select * from (my_table);
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select * from (my_table tt);
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
my_table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tt
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select * from ((my_table tt));
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
my_table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tt
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select * from (((my_table tt)));
<end_of_query/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
my_table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tt
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM counter
LIMIT 10 OFFSET 10
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
counter
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
10
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
10
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM counter
LIMIT 10, 10
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
counter
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
10
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
10
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
WITH RECURSIVE cte(a) AS (SELECT 1 UNION ALL SELECT a+1 FROM cte WHERE a < 5)
SELECT a FROM cte;
<end_of_query/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
RECURSIVE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cte
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
+
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cte
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
<
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
cte
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM counter
LIMIT 10
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
counter
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
10
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
	t.column1
from
	sch.table1 as t
where
	t.b_year in (year(getdate()) , year(getdate()) - 1);
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
	
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
column1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
	
<end_of_token/>
WordSegment
sch
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
table1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
where
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
	
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
b_year
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
in
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
year
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
getdate
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
year
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
getdate
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
-
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- It's possible to have multiple semicolons between statements.
SELECT foo FROM bar;
<end_of_query/>
CommentSegment
-- It's possible to have multiple semicolons between statements.
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
;
<end_of_query/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT foo FROM bar;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
;
<end_of_query/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
;
<end_of_query/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT foo FROM bar;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- https://github.com/sqlfluff/sqlfluff/issues/852
SELECT 1 AS a
UNION ALL
SELECT 1 AS a
ORDER BY a
<end_of_query/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/852
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- https://github.com/sqlfluff/sqlfluff/issues/852
-- ORDER BY and LIMIT are allowed when bracketed. Otherwise not.
(SELECT * FROM a ORDER BY 1 LIMIT 1)
UNION ALL
(SELECT * FROM b ORDER BY 1 LIMIT 1)
ORDER BY 1 LIMIT 1
<end_of_query/>
CommentSegment
-- https://github.com/sqlfluff/sqlfluff/issues/852
<end_of_token/>
NewlineSegment


<end_of_token/>
CommentSegment
-- ORDER BY and LIMIT are allowed when bracketed. Otherwise not.
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ALL
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
b
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
ORDER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
BY
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
LIMIT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
set schema my_schema
<end_of_query/>
WordSegment
set
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
select
    '1'    ::   INT as id1,
    '2'::int as id2
from table_a
<end_of_query/>
WordSegment
select
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
'1'
<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
::
<end_of_token/>
WhitespaceSegment
   
<end_of_token/>
WordSegment
INT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
id1
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
'2'
<end_of_token/>
CodeSegment
::
<end_of_token/>
WordSegment
int
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
id2
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table_a
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT
    y AS woy
FROM
    UNNEST(GENERATE_ARRAY(1, 53)) AS y;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
y
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
woy
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
UNNEST
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
GENERATE_ARRAY
<end_of_token/>
CodeSegment
(
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
53
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
y
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT id, name
FROM
    UNNEST([1, 2, 3]) id WITH OFFSET pos1,
    UNNEST(['a', 'b', 'c']) name WITH OFFSET pos2
WHERE pos1 = pos2;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
id
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
name
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
UNNEST
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
[
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
3
<end_of_token/>
CodeSegment
]
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
id
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
pos1
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
UNNEST
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
[
<end_of_token/>
CodeSegment
'a'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'b'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'c'
<end_of_token/>
CodeSegment
]
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
name
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
OFFSET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
pos2
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
pos1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
pos2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
BEGIN TRANSACTION;
<end_of_query/>
WordSegment
BEGIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRANSACTION
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
UPDATE tbl SET foo = 1 WHERE bar = 2;
<end_of_query/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tbl
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
foo
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
bar
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
END TRANSACTION;
<end_of_query/>
WordSegment
END
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRANSACTION
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT trim('    SparkSQL   ');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
trim
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
'    SparkSQL   '
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT trim(BOTH FROM '    SparkSQL   ');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
trim
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
BOTH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'    SparkSQL   '
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT trim(LEADING FROM '    SparkSQL   ');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
trim
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
LEADING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'    SparkSQL   '
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT trim(TRAILING FROM '    SparkSQL   ');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
trim
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
TRAILING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'    SparkSQL   '
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT trim('SL' FROM 'SSparkSQLS');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
trim
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
'SL'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'SSparkSQLS'
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT trim(BOTH 'SL' FROM 'SSparkSQLS');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
trim
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
BOTH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'SL'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'SSparkSQLS'
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT trim(LEADING 'SL' FROM 'SSparkSQLS');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
trim
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
LEADING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'SL'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'SSparkSQLS'
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT trim(TRAILING 'SL' FROM 'SSparkSQLS');
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
trim
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
TRAILING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'SL'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'SSparkSQLS'
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
truncate a
<end_of_query/>
WordSegment
truncate
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
truncate table a
<end_of_query/>
WordSegment
truncate
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT *
FROM A_TABLE
INNER JOIN (
    SELECT margin
    FROM B_TABLE
) USING (SOME_COLUMN)
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
A_TABLE
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INNER
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
JOIN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
margin
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
B_TABLE
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
USING
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SOME_COLUMN
<end_of_token/>
CodeSegment
)
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
UPDATE table_name SET column1 = value1, column2 = value2 WHERE a=1;
<end_of_query/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table_name
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
value1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
value2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
CodeSegment
=
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
UPDATE table1
SET a = CASE WHEN t2.column = 'T' THEN TRUE
             WHEN t2.column = 'F' THEN FALSE
             ELSE NULL
        END
FROM table2 t2;
<end_of_query/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table1
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SET
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
a
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
CASE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t2
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
column
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'T'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
TRUE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
             
<end_of_token/>
WordSegment
WHEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t2
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
column
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'F'
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
THEN
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FALSE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
             
<end_of_token/>
WordSegment
ELSE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
NULL
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
END
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
UPDATE
  my_table
SET
  my_table.days=other_table.days
FROM
  other_table
WHERE
  my_table.po_number=other_table.po_number
<end_of_query/>
WordSegment
UPDATE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
my_table
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SET
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
days
<end_of_token/>
CodeSegment
=
<end_of_token/>
WordSegment
other_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
days
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
other_table
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
my_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
po_number
<end_of_token/>
CodeSegment
=
<end_of_token/>
WordSegment
other_table
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
po_number
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
UPDATE
  my_table AS tttd
SET
  tttd.days=ttu.days
<end_of_query/>
WordSegment
UPDATE
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
my_table
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
tttd
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SET
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
  
<end_of_token/>
WordSegment
tttd
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
days
<end_of_token/>
CodeSegment
=
<end_of_token/>
WordSegment
ttu
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
days
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT * FROM Persons
WHERE Country='France'
FETCH FIRST 5 ROWS ONLY;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
Persons
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WHERE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
Country
<end_of_token/>
CodeSegment
=
<end_of_token/>
CodeSegment
'France'
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FETCH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FIRST
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
5
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ROWS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
ONLY
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
SELECT 0
UNION
(WITH t AS (SELECT 1) SELECT * FROM t)
;
<end_of_query/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
(WITH t AS (SELECT 0) SELECT * FROM t)
UNION
SELECT 1
;
<end_of_query/>
CodeSegment
(
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
0
<end_of_token/>
CodeSegment
)
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
t
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UNION
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
LiteralSegment
1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
WITH mycte1 AS (
    SELECT
        foo,
        bar,
        baz
    FROM mytable
)

INSERT INTO table2 (column1, column2, column3)
(
    WITH mycte2 AS (
        SELECT
            foo,
            bar,
            baz
        FROM mycte1
    )
    SELECT
        foo,
        bar,
        baz
    FROM mycte2
);
<end_of_query/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
column1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column3
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte2
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- with insert statement with `AS` keyword
WITH mycte AS (
    SELECT
        foo,
        bar,
        baz
    FROM mytable1
)

INSERT INTO table2 (column1, column2, column3)
VALUES ('value1', 'value2', 'value3');
<end_of_query/>
CommentSegment
-- with insert statement with `AS` keyword
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
column1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column3
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
VALUES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
'value1'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'value2'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'value3'
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
-- with statement without `AS` keyword
WITH mycte (
    SELECT
        foo,
        bar,
        baz
    FROM mytable1
)

INSERT INTO table2 (column1, column2, column3)
VALUES ('value1', 'value2', 'value3');
<end_of_query/>
CommentSegment
-- with statement without `AS` keyword
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
column1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column3
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
VALUES
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
CodeSegment
'value1'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'value2'
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
'value3'
<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
WITH mycte AS (
    SELECT
        foo,
        bar,
        baz
    FROM mytable1
)

INSERT INTO table2 (column1, column2, column3)
SELECT
    foo,
    bar,
    baz
FROM mycte;
<end_of_query/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
column1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column3
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
WITH mycte1 AS (
    SELECT
        foo,
        bar,
        baz
    FROM mytable
)

INSERT INTO table2 (column1, column2, column3)
WITH mycte2 AS (
    SELECT
        foo,
        bar,
        baz
    FROM mycte1
)

SELECT
    foo,
    bar,
    baz
FROM mycte2;
<end_of_query/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
INSERT
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
INTO
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
table2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
WordSegment
column1
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column2
<end_of_token/>
CodeSegment
,
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
column3
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte2
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
(
    WITH mycte2 AS (
        WITH mycte1 AS (
            SELECT
                foo,
                bar,
                baz
            FROM mytable
        )
        SELECT
            foo,
            bar,
            baz
        FROM mycte1
    )
    SELECT
        foo,
        bar,
        baz
    FROM mycte2
);
<end_of_query/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte2
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte1
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
                
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
            
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte1
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
baz
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte2
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
create view my_schema.my_view as
select * from schema.table
with no schema binding;
<end_of_query/>
WordSegment
create
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
view
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
my_schema
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
my_view
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
as
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
select
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
*
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
from
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
table
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
with
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
no
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
schema
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
binding
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
WITH mycte AS (
    SELECT
        foo,
        bar
    FROM mytable1
)

UPDATE sometable
SET
    sometable.baz = mycte.bar
FROM
    mycte;
<end_of_query/>
WordSegment
WITH
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
AS
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
(
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
SELECT
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
foo
<end_of_token/>
CodeSegment
,
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
        
<end_of_token/>
WordSegment
bar
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
FROM
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mytable1
<end_of_token/>
NewlineSegment


<end_of_token/>
CodeSegment
)
<end_of_token/>
NewlineSegment


<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
UPDATE
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
sometable
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
SET
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
sometable
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
baz
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
CodeSegment
=
<end_of_token/>
WhitespaceSegment
 
<end_of_token/>
WordSegment
mycte
<end_of_token/>
CodeSegment
.
<end_of_token/>
WordSegment
bar
<end_of_token/>
NewlineSegment


<end_of_token/>
WordSegment
FROM
<end_of_token/>
NewlineSegment


<end_of_token/>
WhitespaceSegment
    
<end_of_token/>
WordSegment
mycte
<end_of_token/>
CodeSegment
;
<end_of_token/>
EndOfFile

<end_of_token/>

<end_of_tokens/>
