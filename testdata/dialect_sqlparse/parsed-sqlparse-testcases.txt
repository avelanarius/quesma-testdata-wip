CREATE OR REPLACE FUNCTION foo(
	p_in1 VARCHAR
	, p_in2 INTEGER
) RETURNS INTEGER AS

  DECLARE
	v_foo INTEGER;  
  BEGIN
  	SELECT *
  	FROM foo
  	INTO v_foo;
  	RETURN v_foo.id;
  END;
<end_of_query/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Name
p_in1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
VARCHAR
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
p_in2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
INTEGER
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
INTEGER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
DECLARE
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Name
v_foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
INTEGER
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword
INTO
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
v_foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword
RETURN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
v_foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
begin;
update foo
       set bar = 1;
commit;
<end_of_query/>
Token.Keyword
begin
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
update
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
set
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
commit
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select *
from foo
where bar = '齐天大圣.カラフルな雲.사랑해요'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'齐天大圣.カラフルな雲.사랑해요'
<end_of_token/>

<end_of_tokens/>
select *
from foo
where bar = '不以物喜，不以己悲'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'不以物喜，不以己悲'
<end_of_token/>

<end_of_tokens/>
select *
from foo
where bar = '齐天大圣.カラフルな雲.사랑해요'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'齐天大圣.カラフルな雲.사랑해요'
<end_of_token/>

<end_of_tokens/>
select *
from foo
where bar = '不以物喜，不以己悲'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'不以物喜，不以己悲'
<end_of_token/>

<end_of_tokens/>
select *
from foo
where bar = '齐天大圣.カラフルな雲.사랑해요'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'齐天大圣.カラフルな雲.사랑해요'
<end_of_token/>

<end_of_tokens/>
select *
from foo
where bar = '不以物喜，不以己悲'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'不以物喜，不以己悲'
<end_of_token/>

<end_of_tokens/>
insert into foo values (1); -- Песня про надежду

<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- Песня про надежду

<end_of_token/>

<end_of_tokens/>
select * from bar; -- select foo

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- select foo

<end_of_token/>

<end_of_tokens/>
select * from bar; -- select foo

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- select foo

<end_of_token/>

<end_of_tokens/>
SELECT * FROM BAR; -- SELECT FOO

<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
BAR
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- SELECT FOO

<end_of_token/>

<end_of_tokens/>
select * from bar; -- select foo

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- select foo

<end_of_token/>

<end_of_tokens/>
select * from bar; -- select foo

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- select foo

<end_of_token/>

<end_of_tokens/>
SELECT * FROM BAR; -- SELECT FOO

<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
BAR
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- SELECT FOO

<end_of_token/>

<end_of_tokens/>
select * from "foo"."bar"
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"foo"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"bar"
<end_of_token/>

<end_of_tokens/>
select *-- statement starts here
from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Comment.Single
-- statement starts here

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select * -- statement starts here
from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- statement starts here

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select-- foo
from -- bar
where
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Comment.Single
-- foo

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- bar

<end_of_token/>
Token.Keyword
where
<end_of_token/>

<end_of_tokens/>
select *-- statement starts here

from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Comment.Single
-- statement starts here

<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select * from foo-- statement starts here
where
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Comment.Single
-- statement starts here

<end_of_token/>
Token.Keyword
where
<end_of_token/>

<end_of_tokens/>
select a-- statement starts here
from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Comment.Single
-- statement starts here

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
--comment
select a-- statement starts here
from foo--comment
f
<end_of_query/>
Token.Comment.Single
--comment

<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Comment.Single
-- statement starts here

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Comment.Single
--comment

<end_of_token/>
Token.Name
f
<end_of_token/>

<end_of_tokens/>
/* sql starts here */
select
<end_of_query/>
Token.Comment.Multiline
/* sql starts here */
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>

<end_of_tokens/>
/* sql starts here */ select
<end_of_query/>
Token.Comment.Multiline
/* sql starts here */
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>

<end_of_tokens/>
/*
 * sql starts here
 */
select
<end_of_query/>
Token.Comment.Multiline
/*
 * sql starts here
 */
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>

<end_of_tokens/>
select (/* sql starts here */ select 2)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Comment.Multiline
/* sql starts here */
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select (/* sql /* starts here */ select 2)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Comment.Multiline
/* sql /* starts here */
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select * -- a comment
from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- a comment

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select * -- a comment
from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- a comment

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select * -- a commentfrom foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- a comment
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select * -- a comment

from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- a comment

<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select * -- a comment

from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- a comment

<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
SELECT 1/*bar*/ AS foo
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Comment.Multiline
/*bar*/
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select --+full(u)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single.Hint
--+full(u)
<end_of_token/>

<end_of_tokens/>
#+ hint
select * from foo
<end_of_query/>
Token.Operator
#+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
hint
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select --+full(u)
--comment simple
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single.Hint
--+full(u)

<end_of_token/>
Token.Comment.Single
--comment simple
<end_of_token/>

<end_of_tokens/>
#+ hint
select * from foo
# comment simple
<end_of_query/>
Token.Operator
#+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
hint
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Comment.Single
# comment simple
<end_of_token/>

<end_of_tokens/>
SELECT /*+cluster(T)*/* FROM T_EEE T where A >:1
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Multiline.Hint
/*+cluster(T)*/
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
T_EEE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
T
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
A
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Name.Placeholder
:1
<end_of_token/>

<end_of_tokens/>
insert /*+ DIRECT */ into sch.table_name as select * from foo
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Multiline.Hint
/*+ DIRECT */
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sch
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
table_name
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select
* from      foo
	where  ( 1 = 2 )

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
select -- foo
from    bar

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- foo

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
select
* /* foo */  from bar 
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Multiline
/* foo */
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>

<end_of_tokens/>
SELECT some_column LIKE 'value'
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
some_column
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
LIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'value'
<end_of_token/>

<end_of_tokens/>
SELECT some_column LIKE 'value'
WHERE id = 1

<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
some_column
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
LIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'value'
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
WHERE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
SELECT some_column LIKE 'value\'' WHERE id = 1
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
some_column
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
LIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'value\''
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHERE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline

<end_of_token/>

<end_of_tokens/>
SELECT some_column LIKE 'value\\\'' WHERE id = 1

<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
some_column
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
LIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'value\\\''
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHERE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>

            select a, b as bb,c from table
            join (select a * 2 as a from new_table) other
            on table.a = other.a
            where c is true
            and b between 3 and 4
            or d is 'blue'
            limit 10
            
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bb
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
new_table
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
other
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
table
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
other
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
is
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
true
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
between
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
or
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
is
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'blue'
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
limit
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
10
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>

<end_of_tokens/>

            select * from a
            join b on a.one = b.one
            left join c on c.two = a.two and c.three = a.three
            full outer join d on d.three = a.three
            cross join e on e.four = a.four
            join f using (one, two, three)
            
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
one
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
one
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
left join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
two
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
two
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
three
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
three
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
full outer join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
three
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
three
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
cross join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
e
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
e
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
four
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
four
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
using
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
one
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
two
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
three
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>

<end_of_tokens/>

            select a,
            case when a = 0
            then 1
            when bb = 1 then 1
            when c = 2 then 2
            else 0 end as d,
            extra_col
            from table
            where c is true
            and b between 3 and 4
            
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
0
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bb
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
0
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
extra_col
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
is
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
true
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
between
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>

<end_of_tokens/>

            select a,
            case when a = 0
            then 1
            when bb = 1 then 1
            when c = 2 then 2
            when d between 3 and 5 then 3
            else 0 end as d,
            extra_col
            from table
            where c is true
            and b between 3 and 4
            
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
0
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bb
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
between
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
0
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
extra_col
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
is
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
true
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
between
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>

<end_of_tokens/>

            select a, b, c, sum(x) as sum_x, count(y) as cnt_y
            from table
            group by a,b,c
            having sum(x) > 1
            and count(y) > 5
            order by 3,2,1
            
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum_x
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
count
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
cnt_y
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
group by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
having
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
count
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
order by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>

<end_of_tokens/>

            select *, sum_b + 2 as mod_sum
            from (
              select a, sum(b) as sum_b
              from table
              group by a,z)
            order by 1,2
            
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum_b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mod_sum
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum_b
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
group by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
order by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>

<end_of_tokens/>

            select a,
            SUM(a) OVER (PARTITION BY b ORDER BY c ROWS
            BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as sum_a,
            ROW_NUMBER() OVER
            (PARTITION BY b, c ORDER BY d DESC) as row_num
            from table
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
SUM
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
OVER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
PARTITION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ORDER BY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ROWS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BETWEEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
UNBOUNDED
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
PRECEDING
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AND
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
CURRENT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ROW
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum_a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
ROW_NUMBER
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
OVER
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
PARTITION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ORDER BY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.Order
DESC
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
row_num
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>

<end_of_tokens/>
select a+b as d from table where (c-d)%2= 1 and e> 3.0/4 and z^2 <100
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Operator
-
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Operator
%
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
e
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Float
3.0
<end_of_token/>
Token.Operator
/
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Operator
^
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
<
<end_of_token/>
Token.Literal.Number.Integer
100
<end_of_token/>

<end_of_tokens/>
select * from table where a &&b or c||d
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
&&
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
or
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Operator
||
<end_of_token/>
Token.Name
d
<end_of_token/>

<end_of_tokens/>
select *, case when a-b then c end from table
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Operator
-
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>

<end_of_tokens/>
select a*b-c from table
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Operator
-
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>

<end_of_tokens/>
select foo; select bar
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
select foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select foo; -- test
 select bar
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- test

<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
select * from foo union select * from bar;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
union
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
and foo between 1 and 2 and bar = 3
<end_of_query/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
between
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>

<end_of_tokens/>
select count(*) from (select * from foo);
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
count
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select f(1)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select f( 1 )
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select f(


1


)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select f(


 1 


)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select f(


  1  


)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select * from foo where bar = 1 and baz = 2 or bzz = 3;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
or
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bzz
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo where bar = 1 and (baz = 2 or bzz = 3);
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
or
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bzz
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo join bar on 1 = 2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
select * from foo inner join bar on 1 = 2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
inner join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
select * from foo left outer join bar on 1 = 2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
left outer join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
select * from foo straight_join bar on 1 = 2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
straight_join
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
select foo, bar, baz from table1, table2 where 1 = 2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
table1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
table2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
select a.*, b.id from a, b
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>

<end_of_tokens/>
select foo, bar, baz from table1, table2 where 1 = 2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
table1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
table2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
select foo, bar, baz from table where foo in (1, 2,3)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
in
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select 'abc' as foo, coalesce(col1, col2)||col3 as bar,col3 from my_table
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'abc'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
coalesce
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
col1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
col2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Operator
||
<end_of_token/>
Token.Name
col3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Name
col3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
my_table
<end_of_token/>

<end_of_tokens/>
select 'abc' as foo, json_build_object('a',  a,'b', b, 'c', c, 'd', d, 'e', e) as col2col3 from my_table
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'abc'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
json_build_object
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.String.Single
'a'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Literal.String.Single
'b'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'c'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'd'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'e'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
e
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
col2col3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
my_table
<end_of_token/>

<end_of_tokens/>
case when foo = 1 then 2 when foo = 3 then 4 else 5 end
<end_of_query/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>

<end_of_tokens/>
case(foo) when bar = 1 then 2 else 3 end
<end_of_query/>
Token.Keyword
case
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>

<end_of_tokens/>
(foo as bar, bar1, bar2 as bar3, b4 as b5)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar3
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b4
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b5
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select c1 -- column1
from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- column1

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select c1 -- column1
from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- column1

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select c1
from foo
order by c1
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
order by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>

<end_of_tokens/>
select c1 from t1 where (c1 = 1) order by c1
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
t1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
order by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>

<end_of_tokens/>
select max(a) b, foo, bar
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
max
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
select foo.bar, nvl(1) from dual
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
nvl
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>

<end_of_tokens/>
insert into foo values (1, 2)
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
insert into foo values (1, 2), (3, 4), (5, 6)
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
6
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
insert into foo(a, b) values (1, 2), (3, 4), (5, 6)
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
6
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
insert into foo values (1, 2)
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
insert into foo values (1, 2), (3, 4), (5, 6)
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
6
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
insert into foo(a, b) values (1, 2), (3, 4), (5, 6)
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
6
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select * from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo; select 1 from dual
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>

<end_of_tokens/>
select * from foo; select 1 from dual
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>

<end_of_tokens/>
select * from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo order by c1 desc, c2, c3;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
order by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.Order
desc
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c2
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c3
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
update foo set value = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
<end_of_query/>
Token.Keyword.DML
update
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
set
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
value
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
update foo set value = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
<end_of_query/>
Token.Keyword.DML
update
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
set
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
value
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select verrrylongcolumn from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
verrrylongcolumn
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "verrrylongcolumn" from "foo"
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"verrrylongcolumn"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"foo"
<end_of_token/>

<end_of_tokens/>
select * from foo, bar where bar.id = foo.bar_id having sum(bar.value) > 100
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar_id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
having
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
value
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
100
<end_of_token/>

<end_of_tokens/>
foo
<end_of_query/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select foo->'bar', foo->'bar';
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Operator
->
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Operator
->
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
case when foo then 1 else bar end
<end_of_query/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>

<end_of_tokens/>
case when foo then 1 else bar end
<end_of_query/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>

<end_of_tokens/>
( where foo = bar  ) from
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>

<end_of_tokens/>
select (select (x3) x2) and (y2) bar
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
x3
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
y2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo := 1;
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
foo := 1
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>

<end_of_tokens/>
x > DATE '2020-01-01'
<end_of_query/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
DATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'2020-01-01'
<end_of_token/>

<end_of_tokens/>
x > TIMESTAMP '2020-01-01 00:00:00'
<end_of_query/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
TIMESTAMP
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'2020-01-01 00:00:00'
<end_of_token/>

<end_of_tokens/>
select a from b where c < d + e
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
<
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
e
<end_of_token/>

<end_of_tokens/>
select a from b where c < d + interval '1 day'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
<
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
interval
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'1 day'
<end_of_token/>

<end_of_tokens/>
select a from b where c < d + interval '6' month
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
<
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
interval
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'6'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
month
<end_of_token/>

<end_of_tokens/>
select a from b where c < current_timestamp - interval '1 day'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
<
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
current_timestamp
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
-
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
interval
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'1 day'
<end_of_token/>

<end_of_tokens/>
select foo.bar from "myscheme"."table" where fail. order
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"myscheme"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"table"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
fail
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
order
<end_of_token/>

<end_of_tokens/>
select * from foo where foo.id = 1
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>

<end_of_tokens/>
select * from (select "foo"."id" from foo)
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"foo"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"id"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
INSERT INTO `test` VALUES('foo', 'bar');
<end_of_query/>
Token.Keyword.DML
INSERT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INTO
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
`test`
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
VALUES
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.String.Single
'foo'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
INSERT INTO `test` VALUES(1, 2), (3, 4), (5, 6);
<end_of_query/>
Token.Keyword.DML
INSERT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INTO
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
`test`
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
VALUES
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
6
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
INSERT INTO `test(a, b)` VALUES(1, 2), (3, 4), (5, 6);
<end_of_query/>
Token.Keyword.DML
INSERT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INTO
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
`test(a, b)`
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
VALUES
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
6
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select 1.0*(a+b) as col, sum(c)/sum(d) from myschema.mytable
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Float
1.0
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
col
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Operator
/
<end_of_token/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
myschema
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
mytable
<end_of_token/>

<end_of_tokens/>
1 as f
<end_of_query/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>

<end_of_tokens/>
foo as f
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>

<end_of_tokens/>
foo f
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>

<end_of_tokens/>
1/2 as f
<end_of_query/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Operator
/
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>

<end_of_tokens/>
1/2 f
<end_of_query/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Operator
/
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>

<end_of_tokens/>
1<2 as f
<end_of_query/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Operator.Comparison
<
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>

<end_of_tokens/>
1<2 f
<end_of_query/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Operator.Comparison
<
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>

<end_of_tokens/>
foo, bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
sum(a), sum(b)
<end_of_query/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
sum(a) as x, b as y
<end_of_query/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>

<end_of_tokens/>
sum(a)::integer, b
<end_of_query/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>

<end_of_tokens/>
sum(a)/count(b) as x, y
<end_of_query/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Operator
/
<end_of_token/>
Token.Name
count
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>

<end_of_tokens/>
sum(a)::integer as x, y
<end_of_query/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>

<end_of_tokens/>
sum(a)::integer/count(b) as x, y
<end_of_query/>
Token.Name
sum
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Operator
/
<end_of_token/>
Token.Name
count
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>

<end_of_tokens/>
a.*, b.id
<end_of_query/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
id
<end_of_token/>

<end_of_tokens/>
a.*
<end_of_query/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Wildcard
*
<end_of_token/>

<end_of_tokens/>
a.
<end_of_query/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>

<end_of_tokens/>
SELECT foo. FROM foo
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
foo as (select *)
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo as(select *)
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo as select *
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>

<end_of_tokens/>
foo() as bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo()||col2 bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Operator
||
<end_of_token/>
Token.Name
col2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo(c1) over win1 as bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
over
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
win1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo(c1) over (partition by c2 order by c3) as bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
over
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
partition
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
order by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c3
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo+100
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Literal.Number.Integer
100
<end_of_token/>

<end_of_tokens/>
foo + 100
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
100
<end_of_token/>

<end_of_tokens/>
foo*100
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Literal.Number.Integer
100
<end_of_token/>

<end_of_tokens/>
a, b, c
<end_of_query/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>

<end_of_tokens/>
(a, b, c)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select * from (select a, b + c as d from table) sub
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
sub
<end_of_token/>

<end_of_tokens/>
a, case when 1 then 2 else 3 end as b, c
<end_of_query/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>

<end_of_tokens/>
(a, case when 1 then 2 else 3 end as b, c)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select *, null, 1, 'foo', bar from mytable, x
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
null
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'foo'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>

<end_of_tokens/>
foo /* a comment */, bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Multiline
/* a comment */
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
a+b as c from table where (d-e)%2= 1
<end_of_query/>
Token.Name
a
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
d
<end_of_token/>
Token.Operator
-
<end_of_token/>
Token.Name
e
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Operator
%
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>

<end_of_tokens/>
1, 2 desc, 3
<end_of_query/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.Order
desc
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>

<end_of_tokens/>
(a desc)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.Order
desc
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select * from foo where bar = 1 order by id desc
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
order by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.Order
desc
<end_of_token/>

<end_of_tokens/>
select x from (select y from foo where bar = 1) z
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>

<end_of_tokens/>
select 1 where 1 = 2 union select 2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
union
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
select 1 where 1 = 2 union all select 2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
union all
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
delete from foo where x > y returning z
<end_of_query/>
Token.Keyword.DML
delete
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
returning
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>

<end_of_tokens/>
select * from foo where a = 1 into baz
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>

<end_of_tokens/>
select foo::integer from bar
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
select (current_database())::information_schema.sql_identifier
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
current_database
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name
information_schema
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
sql_identifier
<end_of_token/>

<end_of_tokens/>
select foo as bar from mytable
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>

<end_of_tokens/>
select foo from mytable t1
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
t1
<end_of_token/>

<end_of_tokens/>
select foo::integer as bar from mytable
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>

<end_of_tokens/>
SELECT DISTINCT (current_database())::information_schema.sql_identifier AS view
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
DISTINCT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
current_database
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name
information_schema
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
sql_identifier
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
view
<end_of_token/>

<end_of_tokens/>
CASE WHEN 1 THEN 2 ELSE 3 END foo
<end_of_query/>
Token.Keyword
CASE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
THEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ELSE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
CREATE TABLE tbl1 AS SELECT coalesce(t1.col1, 0) AS col1 FROM t1
<end_of_query/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
TABLE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
tbl1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
coalesce
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
t1
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
col1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
0
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
col1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
t1
<end_of_token/>

<end_of_tokens/>
CASE WHEN 1 THEN select 2 where foo = 1 end
<end_of_query/>
Token.Keyword
CASE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
THEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>

<end_of_tokens/>
foo.bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
x, y
<end_of_query/>
Token.Name
x
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>

<end_of_tokens/>
x > y
<end_of_query/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>

<end_of_tokens/>
x / y
<end_of_query/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
/
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>

<end_of_tokens/>
foo(1) x, bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
(=)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
(a=1)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
(a>=1)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Operator.Comparison
>=
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo()
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo(null, bar)
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
null
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo(5) over win1
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
over
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
win1
<end_of_token/>

<end_of_tokens/>
foo(5) over (PARTITION BY c1)
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
over
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
PARTITION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
in(1, 2)
<end_of_query/>
Token.Keyword
in
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
"text" Varchar(50) NOT NULL
<end_of_query/>
Token.Literal.String.Symbol
"text"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
Varchar
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
50
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NOT NULL
<end_of_token/>

<end_of_tokens/>
select * from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
update foo
<end_of_query/>
Token.Keyword.DML
update
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
 update foo
<end_of_query/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
update
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>

update foo
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
update
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
foo
<end_of_query/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
foo||bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Operator
||
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo || bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
||
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo || bar 
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
||
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>

<end_of_tokens/>
foo + 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
select * from foo order by c1 desc, c2, c3
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
order by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.Order
desc
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c2
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c3
<end_of_token/>

<end_of_tokens/>
foo = NULL
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>

<end_of_tokens/>
foo = null
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
null
<end_of_token/>

<end_of_tokens/>
foo = 25.5
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Float
25.5
<end_of_token/>

<end_of_tokens/>
(3 + 4) = 7
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
7
<end_of_token/>

<end_of_tokens/>
foo = 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo != 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
!=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo > 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo < 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
<
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo <= 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
<=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo >= 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo ~ 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
~
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo ~~ 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
~~
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo !~~ 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
!~~
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo LIKE 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
LIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo NOT LIKE 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
NOT LIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo ILIKE 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
ILIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
foo NOT ILIKE 'bar'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
NOT ILIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar'
<end_of_token/>

<end_of_tokens/>
select * from mytable where mytable.mycolumn LIKE 'expr%' limit 5;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
mycolumn
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
LIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'expr%'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
limit
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from mytable where mycolumn NOT ILIKE '-expr' group by othercolumn;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mycolumn
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
NOT ILIKE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'-expr'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
group by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
othercolumn
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
foo = DATE(bar.baz)
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
DATE
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
DATE(foo.bar) = DATE(bar.baz)
<end_of_query/>
Token.Name
DATE
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
DATE
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
DATE(foo.bar) = bar.baz
<end_of_query/>
Token.Name
DATE
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
baz
<end_of_token/>

<end_of_tokens/>
foo = DATE 'bar.baz'
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
DATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'bar.baz'
<end_of_token/>

<end_of_tokens/>
FOR foo in bar LOOP foobar END LOOP
<end_of_query/>
Token.Keyword
FOR
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
in
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LOOP
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foobar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END LOOP
<end_of_token/>

<end_of_tokens/>
FOREACH foo in bar LOOP foobar END LOOP
<end_of_query/>
Token.Keyword
FOREACH
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
in
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LOOP
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foobar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END LOOP
<end_of_token/>

<end_of_tokens/>
FOR foo LOOP FOR bar LOOP END LOOP END LOOP
<end_of_query/>
Token.Keyword
FOR
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LOOP
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FOR
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LOOP
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END LOOP
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END LOOP
<end_of_token/>

<end_of_tokens/>
BEGIN foo END
<end_of_query/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>

<end_of_tokens/>
USING(somecol
<end_of_query/>
Token.Keyword
USING
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
somecol
<end_of_token/>

<end_of_tokens/>
BEGIN foo BEGIN bar END END
<end_of_query/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>

<end_of_tokens/>
foo bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo.bar baz
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>

<end_of_tokens/>
foo()
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo.bar()
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo() bar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
foo.bar() baz
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>

<end_of_tokens/>
1 foo
<end_of_query/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
foo AS WITH apple AS 1, banana AS 2
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.CTE
WITH
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
apple
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
banana
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
create table db.tbl (a string)
<end_of_query/>
Token.Keyword.DDL
create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
db
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
tbl
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
string
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select * from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo;select * from bar;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select
*from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select
*from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select*from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace.Newline

<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select
*from foo

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
foo(col1, col2)
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
col1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
col2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
(col1, col2)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Name
col1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
col2
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
foo or (bar, baz)
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
or
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
.5
<end_of_query/>
Token.Literal.Number.Float
.5
<end_of_token/>

<end_of_tokens/>
.51
<end_of_query/>
Token.Literal.Number.Float
.51
<end_of_token/>

<end_of_tokens/>
1.5
<end_of_query/>
Token.Literal.Number.Float
1.5
<end_of_token/>

<end_of_tokens/>
12.5
<end_of_query/>
Token.Literal.Number.Float
12.5
<end_of_token/>

<end_of_tokens/>
select * from foo where user = ?
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
user
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Placeholder
?
<end_of_token/>

<end_of_tokens/>
select * from foo where user = :1
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
user
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Placeholder
:1
<end_of_token/>

<end_of_tokens/>
select * from foo where user = :name
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
user
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Placeholder
:name
<end_of_token/>

<end_of_tokens/>
select * from foo where user = %s
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
user
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Placeholder
%s
<end_of_token/>

<end_of_tokens/>
select * from foo where user = $a
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
user
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Placeholder
$a
<end_of_token/>

<end_of_tokens/>
x %3
<end_of_query/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
%
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>

<end_of_tokens/>
select a.[foo bar] as foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
[foo bar]
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
[foo], [bar]
<end_of_query/>
Token.Name
[foo]
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
[bar]
<end_of_token/>

<end_of_tokens/>
[(foo[i])]
<end_of_query/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Name
i
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
]
<end_of_token/>

<end_of_tokens/>
foo.key
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
key
<end_of_token/>

<end_of_tokens/>
abs(some_col)
<end_of_query/>
Token.Name
abs
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
some_col
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo(5)
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo(bar(5))
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo(DATE '2023-11-14', TIMESTAMP '2023-11-15')
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name.Builtin
DATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'2023-11-14'
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
TIMESTAMP
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'2023-11-15'
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
col1 DIV 5 AS div_col1
<end_of_query/>
Token.Name
col1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator
DIV
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
div_col1
<end_of_token/>

<end_of_tokens/>
select x.y as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
foo
<end_of_query/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
_foo
<end_of_query/>
Token.Name
_foo
<end_of_token/>

<end_of_tokens/>
1_data
<end_of_query/>
Token.Name
1_data
<end_of_token/>

<end_of_tokens/>
業者名稱
<end_of_query/>
Token.Name
業者名稱
<end_of_token/>

<end_of_tokens/>

    CREATE OR REPLACE FUNCTION testfunc1(integer) RETURNS integer AS $$
          ....
    $$ LANGUAGE plpgsql;
    CREATE OR REPLACE FUNCTION testfunc2(integer) RETURNS integer AS $$
          ....
    $$ LANGUAGE plpgsql;
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
testfunc1
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal
$$
          ....
    $$
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
plpgsql
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
testfunc2
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal
$$
          ....
    $$
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
plpgsql
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>

    CREATE OR REPLACE FUNCTION testfunc1(integer) RETURNS integer AS $PROC_1$
          ....
    $PROC_1$ LANGUAGE plpgsql;
    CREATE OR REPLACE FUNCTION testfunc2(integer) RETURNS integer AS $PROC_2$
          ....
    $PROC_2$ LANGUAGE plpgsql;
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
testfunc1
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal
$PROC_1$
          ....
    $PROC_1$
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
plpgsql
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
testfunc2
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal
$PROC_2$
          ....
    $PROC_2$
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
plpgsql
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
UPDATE SET foo =$$bar;SELECT bar$$
<end_of_query/>
Token.Keyword.DML
UPDATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
SET
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Literal
$$bar;SELECT bar$$
<end_of_token/>

<end_of_tokens/>
UPDATE SET foo TO$$bar;SELECT bar$$
<end_of_query/>
Token.Keyword.DML
UPDATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
SET
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
TO$$bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar$$
<end_of_token/>

<end_of_tokens/>
DOUBLE PRECISION
<end_of_query/>
Token.Name.Builtin
DOUBLE PRECISION
<end_of_token/>

<end_of_tokens/>
?
<end_of_query/>
Token.Name.Placeholder
?
<end_of_token/>

<end_of_tokens/>
:1
<end_of_query/>
Token.Name.Placeholder
:1
<end_of_token/>

<end_of_tokens/>
:foo
<end_of_query/>
Token.Name.Placeholder
:foo
<end_of_token/>

<end_of_tokens/>
%s
<end_of_query/>
Token.Name.Placeholder
%s
<end_of_token/>

<end_of_tokens/>
%(foo)s
<end_of_query/>
Token.Name.Placeholder
%(foo)s
<end_of_token/>

<end_of_tokens/>
6.67428E-8
<end_of_query/>
Token.Literal.Number.Float
6.67428E-8
<end_of_token/>

<end_of_tokens/>
1.988e33
<end_of_query/>
Token.Literal.Number.Float
1.988e33
<end_of_token/>

<end_of_tokens/>
1e-12
<end_of_query/>
Token.Literal.Number.Float
1e-12
<end_of_token/>

<end_of_tokens/>
e1
<end_of_query/>
Token.Name
e1
<end_of_token/>

<end_of_tokens/>
'foo'
<end_of_query/>
Token.Literal.String.Single
'foo'
<end_of_token/>

<end_of_tokens/>
"foo"
<end_of_query/>
Token.Literal.String.Symbol
"foo"
<end_of_token/>

<end_of_tokens/>
'f
f'
<end_of_query/>
Token.Literal.String.Single
'f
f'
<end_of_token/>

<end_of_tokens/>
[col1],[col2]
<end_of_query/>
Token.Name
[col1]
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Name
[col2]
<end_of_token/>

<end_of_tokens/>
[col1]+[col2]
<end_of_query/>
Token.Name
[col1]
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Name
[col2]
<end_of_token/>

<end_of_tokens/>
col[1]
<end_of_query/>
Token.Name
col
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
]
<end_of_token/>

<end_of_tokens/>
col[x][(y+1)*2]
<end_of_query/>
Token.Name
col
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Operator
+
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
]
<end_of_token/>

<end_of_tokens/>
somefunc()[1]
<end_of_query/>
Token.Name
somefunc
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
]
<end_of_token/>

<end_of_tokens/>
schem.col[1]
<end_of_query/>
Token.Name
schem
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
col
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
]
<end_of_token/>

<end_of_tokens/>
col[1] x
<end_of_query/>
Token.Name
col
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>

<end_of_tokens/>
ARRAY[%s, %s]
<end_of_query/>
Token.Name.Builtin
ARRAY
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Name.Placeholder
%s
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Placeholder
%s
<end_of_token/>
Token.Punctuation
]
<end_of_token/>

<end_of_tokens/>
x int, y int[], z int
<end_of_query/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
int
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
int
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
int
<end_of_token/>

<end_of_tokens/>
select 1 -- foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- foo
<end_of_token/>

<end_of_tokens/>
select 1 # foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
# foo
<end_of_token/>

<end_of_tokens/>
foo
<end_of_query/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
@foo
<end_of_query/>
Token.Name
@foo
<end_of_token/>

<end_of_tokens/>
#foo
<end_of_query/>
Token.Name
#foo
<end_of_token/>

<end_of_tokens/>
##foo
<end_of_query/>
Token.Name
##foo
<end_of_token/>

<end_of_tokens/>
select * from dual
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>

<end_of_tokens/>
select a0, b0, c0, d0, e0 from (select * from dual) q0 where 1=1 and 2=2
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a0
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b0
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c0
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
d0
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
e0
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
q0
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
and
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
select * from dual
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>

<end_of_tokens/>
select a0.* from dual a0
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a0
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a0
<end_of_token/>

<end_of_tokens/>
select 1 * 2 from dual
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>

<end_of_tokens/>
CREATE TABLE test();
<end_of_query/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
TABLE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
test
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
$$foo$$
<end_of_query/>
Token.Literal
$$foo$$
<end_of_token/>

<end_of_tokens/>
$_$foo$_$
<end_of_query/>
Token.Literal
$_$foo$_$
<end_of_token/>

<end_of_tokens/>
$token$ foo $token$
<end_of_query/>
Token.Literal
$token$ foo $token$
<end_of_token/>

<end_of_tokens/>
$_$ foo $token$bar$token$ baz$_$
<end_of_query/>
Token.Literal
$_$ foo $token$bar$token$ baz$_$
<end_of_token/>

<end_of_tokens/>
$A$ foo $B$
<end_of_query/>
Token.Name.Placeholder
$A
<end_of_token/>
Token.Error
$
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Placeholder
$B
<end_of_token/>
Token.Error
$
<end_of_token/>

<end_of_tokens/>
insert into test (id, name) values (1, 'тест');
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
test
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
name
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'тест'
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
insert into test (id, name) values (1, 'тест');
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
test
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
name
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'тест'
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
update a t set t.b=1
<end_of_query/>
Token.Keyword.DML
update
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
t
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
set
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
t
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>

<end_of_tokens/>
from(select 1)
<end_of_query/>
Token.Keyword
from
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
from (select 1)
<end_of_query/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
(

1

)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
(

 1 

)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select * from foo BACON SPAM EGGS;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
BACON
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
SPAM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
EGGS
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo BACON SPAM EGGS;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
BACON
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
SPAM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
EGGS
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo zorder by bar;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
zorder
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
by
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
->
<end_of_query/>
Token.Operator
->
<end_of_token/>

<end_of_tokens/>
->>
<end_of_query/>
Token.Operator
->>
<end_of_token/>

<end_of_tokens/>
#>
<end_of_query/>
Token.Operator
#>
<end_of_token/>

<end_of_tokens/>
#>>
<end_of_query/>
Token.Operator
#>>
<end_of_token/>

<end_of_tokens/>
@>
<end_of_query/>
Token.Operator
@>
<end_of_token/>

<end_of_tokens/>
<@
<end_of_query/>
Token.Operator
<@
<end_of_token/>

<end_of_tokens/>
||
<end_of_query/>
Token.Operator
||
<end_of_token/>

<end_of_tokens/>
-
<end_of_query/>
Token.Operator
-
<end_of_token/>

<end_of_tokens/>
#-
<end_of_query/>
Token.Operator
#-
<end_of_token/>

<end_of_tokens/>
(where 1)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
select 'one';
select 'two\'';
select 'three';
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'one'
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'two\''
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'three'
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
--hello
<end_of_query/>
Token.Comment.Single
--hello
<end_of_token/>

<end_of_tokens/>
-- hello
<end_of_query/>
Token.Comment.Single
-- hello
<end_of_token/>

<end_of_tokens/>
--hello

<end_of_query/>
Token.Comment.Single
--hello

<end_of_token/>

<end_of_tokens/>
--
<end_of_query/>
Token.Comment.Single
--
<end_of_token/>

<end_of_tokens/>
--

<end_of_query/>
Token.Comment.Single
--

<end_of_token/>

<end_of_tokens/>
create
<end_of_query/>
Token.Keyword.DDL
create
<end_of_token/>

<end_of_tokens/>
create
<end_of_query/>
Token.Keyword.DDL
create
<end_of_token/>

<end_of_tokens/>
select * from foo where bar = 1 limit 1
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
limit
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>

<end_of_tokens/>
SELECT foo; -- comment
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- comment
<end_of_token/>

<end_of_tokens/>
/* foo */
<end_of_query/>
Token.Comment.Multiline
/* foo */
<end_of_token/>

<end_of_tokens/>
select user.id from user
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
user
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
user
<end_of_token/>

<end_of_tokens/>
SELECT id, name FROM (SELECT id, name FROM bar) as foo
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
name
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
name
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
SELECT id ==  name FROM (SELECT id, name FROM bar)
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
==
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
name
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
name
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
SELECT id ==  name FROM (SELECT id, name FROM bar) as foo
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
==
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
name
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
name
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x.y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select x."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x".y::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as z from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
z
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select "x"."y"::text as "z" from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"x"
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Literal.String.Symbol
"y"
<end_of_token/>
Token.Punctuation
::
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"z"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
   CREATE OR REPLACE FUNCTION func_a(text)
                  RETURNS boolean  LANGUAGE plpgsql STRICT IMMUTABLE AS
                $_$
                BEGIN
                 ...
                END;
                $_$;

                CREATE OR REPLACE FUNCTION func_b(text)
                  RETURNS boolean  LANGUAGE plpgsql STRICT IMMUTABLE AS
                $_$
                BEGIN
                 ...
                END;
                $_$;

                ALTER TABLE..... ;
<end_of_query/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
func_a
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
boolean
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
plpgsql
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
STRICT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
IMMUTABLE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal
$_$
                BEGIN
                 ...
                END;
                $_$
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
func_b
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
boolean
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
plpgsql
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
STRICT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
IMMUTABLE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal
$_$
                BEGIN
                 ...
                END;
                $_$
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
ALTER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
TABLE
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select foo -- Comment containing Ümläuts
from bar
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- Comment containing Ümläuts

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
select * from foo where bar = '|ËêplL4¡høN{'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'|ËêplL4¡høN{'
<end_of_token/>

<end_of_tokens/>
FROM AS foo
<end_of_query/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
insert into foo values (1); -- Песня про надежду
<end_of_query/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
values
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- Песня про надежду
<end_of_token/>

<end_of_tokens/>
-- this file is streamed in
insert into foo

<end_of_query/>
Token.Comment.Single
-- this file is streamed in

<end_of_token/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
UPDATE "gallery_photo" SET "owner_id" = 4018, "deleted_at" = NULL, "width" = NULL, "height" = NULL, "rating_votes" = 0, "rating_score" = 0, "thumbnail_width" = NULL, "thumbnail_height" = NULL, "price" = 1, "description" = NULL
<end_of_query/>
Token.Keyword.DML
UPDATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"gallery_photo"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
SET
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"owner_id"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
4018
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"deleted_at"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"width"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"height"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"rating_votes"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
0
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"rating_score"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
0
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"thumbnail_width"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"thumbnail_height"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"price"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"description"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>

<end_of_tokens/>
SELECT 1 FROM foo WHERE 2 = 3 EXCEPT SELECT 2 FROM bar WHERE 1 = 2
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHERE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
EXCEPT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHERE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>

<end_of_tokens/>
SELECT NULL AS c1, NULL AS c2 FROM t1
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
c2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
t1
<end_of_token/>

<end_of_tokens/>
-- this file is streamed in
insert into foo

<end_of_query/>
Token.Comment.Single
-- this file is streamed in

<end_of_token/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
   CREATE FUNCTION a(x VARCHAR(20)) RETURNS VARCHAR(20)
                BEGIN
                 DECLARE y VARCHAR(20);
                 RETURN x;
                END;
                SELECT * FROM a.b;
<end_of_query/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
VARCHAR
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
20
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
VARCHAR
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
20
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
DECLARE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
VARCHAR
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
20
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
   CREATE FUNCTION a(x VARCHAR(20)) RETURNS VARCHAR(20)
                BEGIN
                 DECLARE y VARCHAR(20);
                 IF (1 = 1) THEN
                 SET x = y;
                 END IF;
                 RETURN x;
                END;
                SELECT * FROM a.b;
<end_of_query/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
VARCHAR
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
20
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
VARCHAR
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
20
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
DECLARE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
VARCHAR
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
20
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
IF
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
THEN
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
SET
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
y
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END IF
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
-- comment
insert into foo
<end_of_query/>
Token.Comment.Single
-- comment

<end_of_token/>
Token.Keyword.DML
insert
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
into
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
 select * from foo
<end_of_query/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
SELECT 1, 2, 3 FROM foo;
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
WITH foo AS (SELECT 1, 2, 3)SELECT * FROM foo;
<end_of_query/>
Token.Keyword.CTE
WITH
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>

        WITH foo AS (SELECT 1 AS abc, 2 AS def),
             bar AS (SELECT * FROM something WHERE x > 1)
        INSERT INTO elsewhere SELECT * FROM foo JOIN bar;
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.CTE
WITH
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
abc
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
def
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
something
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHERE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
>
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
INSERT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INTO
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
elsewhere
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select 1 from (select 1 as one, 2 as two, 3 from dual) t0
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
one
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
two
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
3
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dual
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
t0
<end_of_token/>

<end_of_tokens/>
--comment
select 1
<end_of_query/>
Token.Comment.Single
--comment

<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>

<end_of_tokens/>
SELECT x AS
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
x
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>

<end_of_tokens/>
AS
<end_of_query/>
Token.Keyword
AS
<end_of_token/>

<end_of_tokens/>
select * from foo where bar = 'é½å¤©å¤§å£.ã«ã©ãã«ãªé².ì¬ëí´ì'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'é½å¤©å¤§å£.ã«ã©ãã«ãªé².ì¬ëí´ì'
<end_of_token/>

<end_of_tokens/>
CREATE INDEX CONCURRENTLY myindex ON mytable(col1);
<end_of_query/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INDEX
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
CONCURRENTLY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
myindex
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ON
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
col1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
SELECT @min_price:=MIN(price), @max_price:=MAX(price) FROM shop;
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
@min_price
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Name
MIN
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
price
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
@max_price
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Name
MAX
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
price
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
shop
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
SELECT @min_price:=MIN(price), @max_price:=MAX(price) FROM shop;
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
@min_price
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Name
MIN
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
price
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
@max_price
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Name
MAX
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
price
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
shop
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
SELECT @min_price:=MIN(price), @max_price:=MAX(price) FROM shop
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
@min_price
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Name
MIN
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
price
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
@max_price
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Name
MAX
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
price
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
shop
<end_of_token/>

<end_of_tokens/>
SELECT @min_price:=MIN(price), @max_price:=MAX(price) FROM shop
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
@min_price
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Name
MIN
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
price
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
@max_price
<end_of_token/>
Token.Assignment
:=
<end_of_token/>
Token.Name
MAX
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
price
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
shop
<end_of_token/>

<end_of_tokens/>
\copy select * from foo
<end_of_query/>
Token.Generic.Command
\copy
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
Create table myTable
(
  myId TINYINT NOT NULL, --my special comment
  myName VARCHAR2(100) NOT NULL
)
<end_of_query/>
Token.Keyword.DDL
Create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
myTable
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
myId
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
TINYINT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NOT NULL
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
--my special comment

<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
myName
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
VARCHAR2
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
100
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NOT NULL
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE RULE ruled_tab_2rules AS ON INSERT
TO public.ruled_tab
DO instead (
select 1;
select 2;
);
<end_of_query/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RULE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
ruled_tab_2rules
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ON
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
INSERT
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
TO
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
public
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
ruled_tab
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
DO
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
instead
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select bar at time zone 'UTC' as foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.TZCast
at time zone 'UTC'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
SELECT f(HOUR from bar AT TIME ZONE 'UTC') from foo
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
f
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
HOUR
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.TZCast
AT TIME ZONE 'UTC'
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
(as foo)
<end_of_query/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
where, foo
<end_of_query/>
Token.Keyword
where
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
grant foo to user1@`myhost`; grant bar to user1@`myhost`;
<end_of_query/>
Token.Keyword.DCL
grant
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
to
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
user1
<end_of_token/>
Token.Operator
@
<end_of_token/>
Token.Name
`myhost`
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DCL
grant
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
to
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
user1
<end_of_token/>
Token.Operator
@
<end_of_token/>
Token.Name
`myhost`
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>

        WITH foo AS (),
             -- A comment before baz subquery
             baz AS ()
        SELECT * FROM baz;
<end_of_query/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.CTE
WITH
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- A comment before baz subquery

<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
PRIMARY KEY
<end_of_query/>
Token.Keyword
PRIMARY KEY
<end_of_token/>

<end_of_tokens/>
[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
<end_of_query/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
[
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>
Token.Punctuation
]
<end_of_token/>

<end_of_tokens/>
select * from foo;select * from foo where bar = 'foo;bar';
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
where
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'foo;bar'
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select ''; select ''';
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
''
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
''
<end_of_token/>
Token.Error
'
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE FUNCTION foo(
	p_in1 VARCHAR
	, p_in2 INTEGER
) RETURNS INTEGER AS

  DECLARE
	v_foo INTEGER;  
  BEGIN
  	SELECT *
  	FROM foo
  	INTO v_foo;
  	RETURN v_foo.id;
  END;
<end_of_query/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Name
p_in1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
VARCHAR
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
p_in2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
INTEGER
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
INTEGER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
DECLARE
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Name
v_foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
INTEGER
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword
INTO
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
v_foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
	
<end_of_token/>
Token.Keyword
RETURN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
v_foo
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
id
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE FUNCTION public.delete_data (
    p_tabelle VARCHAR
  , p_key VARCHAR
  , p_value INTEGER
) RETURNS INTEGER AS
$$
DECLARE
    p_retval                INTEGER;
    v_constraint            RECORD;
    v_count                 INTEGER;
    v_data                  RECORD;
    v_fieldname             VARCHAR;
    v_sql                   VARCHAR;
    v_key                   VARCHAR;
    v_value                 INTEGER;
BEGIN
    v_sql := 'SELECT COUNT(*) FROM ' || p_tabelle || ' WHERE ' || p_key || ' = ' || p_value;
    --RAISE NOTICE '%', v_sql;
    EXECUTE v_sql INTO v_count;
    IF v_count::integer != 0 THEN
        SELECT att.attname
            INTO v_key
            FROM pg_attribute att
                LEFT JOIN pg_constraint con ON con.conrelid = att.attrelid 
                    AND con.conkey[1] = att.attnum 
                    AND con.contype = 'p', pg_type typ, pg_class rel, pg_namespace ns
            WHERE att.attrelid = rel.oid
                AND att.attnum > 0 
                AND typ.oid = att.atttypid
                AND att.attisdropped = false
                AND rel.relname = p_tabelle
                AND con.conkey[1] = 1
                AND ns.oid = rel.relnamespace
                AND ns.nspname = 'public'
            ORDER BY att.attnum;
        v_sql := 'SELECT ' || v_key || ' AS id FROM ' || p_tabelle || ' WHERE ' || p_key || ' = ' || p_value;
        FOR v_data IN EXECUTE v_sql
        LOOP
            --RAISE NOTICE ' -> % %', p_tabelle, v_data.id;
            FOR v_constraint IN SELECT t.constraint_name
                                , t.constraint_type
                                , t.table_name
                                , c.column_name
                                FROM public.v_table_constraints t
                                    , public.v_constraint_columns c
                                WHERE t.constraint_name = c.constraint_name
                                    AND t.constraint_type = 'FOREIGN KEY'
                                    AND c.table_name = p_tabelle
                                    AND t.table_schema = 'public'
                                    AND c.table_schema = 'public'
            LOOP
                v_fieldname := substring(v_constraint.constraint_name from 1 for length(v_constraint.constraint_name) - length(v_constraint.column_name) - 1);
                IF (v_constraint.table_name = p_tabelle) AND (p_value = v_data.id) THEN
                    --RAISE NOTICE 'Skip (Selbstverweis)';
                    CONTINUE;
                ELSE
                    PERFORM delete_data(v_constraint.table_name::varchar, v_fieldname::varchar, v_data.id::integer);
                END IF;
            END LOOP;
        END LOOP;
        v_sql := 'DELETE FROM ' || p_tabelle || ' WHERE ' || p_key || ' = ' || p_value;
        --RAISE NOTICE '%', v_sql;
        EXECUTE v_sql;
        p_retval := 1;
    ELSE
        --RAISE NOTICE ' -> Keine Sätze gefunden';
        p_retval := 0;
    END IF;
    RETURN p_retval;
END;
$$
LANGUAGE plpgsql;
<end_of_query/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
public
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
delete_data
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
p_tabelle
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
VARCHAR
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
p_key
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
VARCHAR
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
p_value
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
INTEGER
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
INTEGER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Literal
$$
DECLARE
    p_retval                INTEGER;
    v_constraint            RECORD;
    v_count                 INTEGER;
    v_data                  RECORD;
    v_fieldname             VARCHAR;
    v_sql                   VARCHAR;
    v_key                   VARCHAR;
    v_value                 INTEGER;
BEGIN
    v_sql := 'SELECT COUNT(*) FROM ' || p_tabelle || ' WHERE ' || p_key || ' = ' || p_value;
    --RAISE NOTICE '%', v_sql;
    EXECUTE v_sql INTO v_count;
    IF v_count::integer != 0 THEN
        SELECT att.attname
            INTO v_key
            FROM pg_attribute att
                LEFT JOIN pg_constraint con ON con.conrelid = att.attrelid 
                    AND con.conkey[1] = att.attnum 
                    AND con.contype = 'p', pg_type typ, pg_class rel, pg_namespace ns
            WHERE att.attrelid = rel.oid
                AND att.attnum > 0 
                AND typ.oid = att.atttypid
                AND att.attisdropped = false
                AND rel.relname = p_tabelle
                AND con.conkey[1] = 1
                AND ns.oid = rel.relnamespace
                AND ns.nspname = 'public'
            ORDER BY att.attnum;
        v_sql := 'SELECT ' || v_key || ' AS id FROM ' || p_tabelle || ' WHERE ' || p_key || ' = ' || p_value;
        FOR v_data IN EXECUTE v_sql
        LOOP
            --RAISE NOTICE ' -> % %', p_tabelle, v_data.id;
            FOR v_constraint IN SELECT t.constraint_name
                                , t.constraint_type
                                , t.table_name
                                , c.column_name
                                FROM public.v_table_constraints t
                                    , public.v_constraint_columns c
                                WHERE t.constraint_name = c.constraint_name
                                    AND t.constraint_type = 'FOREIGN KEY'
                                    AND c.table_name = p_tabelle
                                    AND t.table_schema = 'public'
                                    AND c.table_schema = 'public'
            LOOP
                v_fieldname := substring(v_constraint.constraint_name from 1 for length(v_constraint.constraint_name) - length(v_constraint.column_name) - 1);
                IF (v_constraint.table_name = p_tabelle) AND (p_value = v_data.id) THEN
                    --RAISE NOTICE 'Skip (Selbstverweis)';
                    CONTINUE;
                ELSE
                    PERFORM delete_data(v_constraint.table_name::varchar, v_fieldname::varchar, v_data.id::integer);
                END IF;
            END LOOP;
        END LOOP;
        v_sql := 'DELETE FROM ' || p_tabelle || ' WHERE ' || p_key || ' = ' || p_value;
        --RAISE NOTICE '%', v_sql;
        EXECUTE v_sql;
        p_retval := 1;
    ELSE
        --RAISE NOTICE ' -> Keine Sätze gefunden';
        p_retval := 0;
    END IF;
    RETURN p_retval;
END;
$$
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
plpgsql
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE FUNCTION update_something() RETURNS void AS
$body$
BEGIN
    raise notice 'foo';
END;
$body$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;
<end_of_query/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
update_something
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
void
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Literal
$body$
BEGIN
    raise notice 'foo';
END;
$body$
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'plpgsql'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
VOLATILE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
CALLED
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ON
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INPUT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
SECURITY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INVOKER
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
CREATE OR REPLACE FUNCTION foo() RETURNS integer AS
$body$
DECLARE
BEGIN
 select * from foo;
END;
$body$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT SECURITY INVOKER;
<end_of_query/>
Token.Keyword.DDL
CREATE OR REPLACE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
integer
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Literal
$body$
DECLARE
BEGIN
 select * from foo;
END;
$body$
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'plpgsql'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
VOLATILE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
CALLED
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ON
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NULL
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INPUT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
SECURITY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
INVOKER
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
CREATE FUNCTION doubledollarinbody(var1 text) RETURNS text
/* see issue277 */
LANGUAGE plpgsql
AS $_$
DECLARE
  str text;
  BEGIN
    str = $$'foo'$$||var1;
    execute 'select '||str into str;
    return str;
  END
$_$;
<end_of_query/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FUNCTION
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
doubledollarinbody
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
var1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
RETURNS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name.Builtin
text
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Comment.Multiline
/* see issue277 */
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
LANGUAGE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
plpgsql
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal
$_$
DECLARE
  str text;
  BEGIN
    str = $$'foo'$$||var1;
    execute 'select '||str into str;
    return str;
  END
$_$
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from user;
--select * from host;
select * from user;
select * -- foo;
from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
user
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Comment.Single
--select * from host;

<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
user
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- foo;

<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select foo; -- comment

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- comment

<end_of_token/>

<end_of_tokens/>
select foo; -- comment
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- comment
<end_of_token/>

<end_of_tokens/>
select foo; -- comment

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- comment

<end_of_token/>

<end_of_tokens/>
select foo; -- comment
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- comment
<end_of_token/>

<end_of_tokens/>
begin;
update foo
       set bar = 1;
commit;
<end_of_query/>
Token.Keyword
begin
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
update
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
set
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
commit
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
CREATE TRIGGER IF NOT EXISTS remove_if_it_was_the_last_file_link
-- Delete the direntry when is removed it's last static link
    AFTER DELETE ON links
    WHEN NOT EXISTS
    (
        SELECT * FROM links
        WHERE child_entry = OLD.child_entry
        LIMIT 1
    )
BEGIN
    DELETE FROM dir_entries
    WHERE dir_entries.inode = OLD.child_entry;
END;
<end_of_query/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
TRIGGER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
IF
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NOT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
EXISTS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
remove_if_it_was_the_last_file_link
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Comment.Single
-- Delete the direntry when is removed it's last static link

<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AFTER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
DELETE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ON
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
links
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
NOT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
EXISTS
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
links
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHERE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
child_entry
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
OLD
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
child_entry
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
LIMIT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
DELETE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dir_entries
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHERE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
dir_entries
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
inode
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
OLD
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
child_entry
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
DROP TABLE IF EXISTS FOO;

SELECT * FROM BAR;
<end_of_query/>
Token.Keyword.DDL
DROP
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
TABLE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
IF
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
EXISTS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
FOO
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
BAR
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo;
-- Testing an umlaut: ä
select * from bar;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Comment.Single
-- Testing an umlaut: ä

<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo; -- foo
select * from bar;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Comment.Single
-- foo

<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
SELECT case when val = 1 then 2 else null end as foo;
comment on table actor is 'The actor table.';
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
val
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
null
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
as
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
comment
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
on
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
table
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
actor
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
is
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'The actor table.'
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
create procedure procName()
begin
  select case when column = 'value' then column else 0 end;
end;
create procedure procName()
begin
  select 1;
end;
<end_of_query/>
Token.Keyword.DDL
create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
procedure
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
procName
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
begin
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
case
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
when
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
column
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'value'
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
then
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
column
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
else
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
0
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DDL
create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
procedure
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
procName
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
begin
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
DECLARE CURSOR "foo" AS SELECT 1;
SELECT 2;
<end_of_query/>
Token.Keyword
DECLARE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
CURSOR
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"foo"
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
CREATE TEMPORARY TABLE tmp SELECT IF(a=1, a, b) AS o FROM one; SELECT t FROM two
<end_of_query/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
TEMPORARY
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
TABLE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
tmp
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
IF
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
a
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
b
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
o
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
one
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
t
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
two
<end_of_token/>

<end_of_tokens/>
SELECT 1; SELECT 2;
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
SELECT 1; SELECT 2;
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
SELECT ö
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
ö
<end_of_token/>

<end_of_tokens/>
select * from foo; select * from bar;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select foo;
select bar;

<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
select "foo
bar"
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Symbol
"foo
bar"
<end_of_token/>

<end_of_tokens/>
select 'foo
ar'
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.String.Single
'foo
ar'
<end_of_token/>

<end_of_tokens/>
create procedure proc1()
begin
  declare handler for foo begin end;
  select 1;
end;

create procedure proc2()
begin
  select 1;
end;
<end_of_query/>
Token.Keyword.DDL
create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
procedure
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
proc1
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
begin
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
declare
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
handler for
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
begin
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DDL
create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
procedure
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
proc2
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
begin
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
select * from foo; select * from bar;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
  select * from foo;

select * from bar;




<end_of_query/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
select * from foo

;  bar
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>

<end_of_tokens/>
create procedure proc1()
begin
  declare handler for foo begin end;
  select 1;
end;

create procedure proc2()
begin
  select 1;
end;
<end_of_query/>
Token.Keyword.DDL
create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
procedure
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
proc1
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
begin
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
declare
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
handler for
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
begin
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DDL
create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
procedure
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
proc2
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
begin
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
end
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
USE foo;
GO
SELECT 1;
GO
<end_of_query/>
Token.Keyword
USE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
GO
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
GO
<end_of_token/>

<end_of_tokens/>
SELECT * FROM foo;
GO
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
FROM
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
GO
<end_of_token/>

<end_of_tokens/>
USE foo;
GO 2
SELECT 1;
<end_of_query/>
Token.Keyword
USE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
GO 2
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
CREATE TRIGGER mytrig
AFTER UPDATE OF vvv ON mytable
BEGIN
    UPDATE aa
        SET mycola = (CASE WHEN (A=1) THEN 2 END);
    UPDATE bb
        SET mycolb = (CASE WHEN (B=1) THEN 5 END);
END;
<end_of_query/>
Token.Keyword.DDL
CREATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
TRIGGER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytrig
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
AFTER
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
UPDATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
OF
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
vvv
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
ON
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mytable
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
BEGIN
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
UPDATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
aa
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
SET
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mycola
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
CASE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
A
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
THEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
UPDATE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bb
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
SET
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
mycolb
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Keyword
CASE
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
WHEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Name
B
<end_of_token/>
Token.Operator.Comparison
=
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
THEN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
5
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Punctuation
)
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Keyword
END
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
select * from foo;
<end_of_query/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Wildcard
*
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
from
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
`foo`.`bar`
<end_of_query/>
Token.Name
`foo`
<end_of_token/>
Token.Punctuation
.
<end_of_token/>
Token.Name
`bar`
<end_of_token/>

<end_of_tokens/>
foo
bar

<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
foobar
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline

<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace.Newline

<end_of_token/>

<end_of_tokens/>
foo
bar

<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
foo
bar

<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Text.Whitespace.Newline


<end_of_token/>

<end_of_tokens/>
create created_foo
<end_of_query/>
Token.Keyword.DDL
create
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
created_foo
<end_of_token/>

<end_of_tokens/>
enddate
<end_of_query/>
Token.Name
enddate
<end_of_token/>

<end_of_tokens/>
join_col
<end_of_query/>
Token.Name
join_col
<end_of_token/>

<end_of_tokens/>
left join_col
<end_of_query/>
Token.Keyword
left
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
join_col
<end_of_token/>

<end_of_tokens/>
values(-1)
<end_of_query/>
Token.Keyword
values
<end_of_token/>
Token.Punctuation
(
<end_of_token/>
Token.Literal.Number.Integer
-1
<end_of_token/>
Token.Punctuation
)
<end_of_token/>

<end_of_tokens/>
foo, bar, baz
<end_of_query/>
Token.Name
foo
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
bar
<end_of_token/>
Token.Punctuation
,
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
baz
<end_of_token/>

<end_of_tokens/>
'test'
<end_of_query/>
Token.Literal.String.Single
'test'
<end_of_token/>

<end_of_tokens/>
 select foo
<end_of_query/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
select
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
SELECT 1; SELECT 2;
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
SELECT 1; SELECT 2;
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
SELECT 1; SELECT 2;
<end_of_query/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
1
<end_of_token/>
Token.Punctuation
;
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword.DML
SELECT
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Literal.Number.Integer
2
<end_of_token/>
Token.Punctuation
;
<end_of_token/>

<end_of_tokens/>
FOOBAR{
<end_of_query/>
Token.Name
FOOBAR
<end_of_token/>
Token.Error
{
<end_of_token/>

<end_of_tokens/>
JOIN foo
<end_of_query/>
Token.Keyword
JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
LEFT JOIN foo
<end_of_query/>
Token.Keyword
LEFT JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
LEFT OUTER JOIN foo
<end_of_query/>
Token.Keyword
LEFT OUTER JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
FULL OUTER JOIN foo
<end_of_query/>
Token.Keyword
FULL OUTER JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
NATURAL JOIN foo
<end_of_query/>
Token.Keyword
NATURAL JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
CROSS JOIN foo
<end_of_query/>
Token.Keyword
CROSS JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
STRAIGHT JOIN foo
<end_of_query/>
Token.Keyword
STRAIGHT JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
INNER JOIN foo
<end_of_query/>
Token.Keyword
INNER JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
LEFT INNER JOIN foo
<end_of_query/>
Token.Keyword
LEFT INNER JOIN
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
UNION ALL
<end_of_query/>
Token.Keyword
UNION ALL
<end_of_token/>

<end_of_tokens/>
END IF
<end_of_query/>
Token.Keyword
END IF
<end_of_token/>

<end_of_tokens/>
END   IF
<end_of_query/>
Token.Keyword
END   IF
<end_of_token/>

<end_of_tokens/>
END	
IF
<end_of_query/>
Token.Keyword
END	
IF
<end_of_token/>

<end_of_tokens/>
END LOOP
<end_of_query/>
Token.Keyword
END LOOP
<end_of_token/>

<end_of_tokens/>
END   LOOP
<end_of_query/>
Token.Keyword
END   LOOP
<end_of_token/>

<end_of_tokens/>
END	
LOOP
<end_of_query/>
Token.Keyword
END	
LOOP
<end_of_token/>

<end_of_tokens/>
ASC
<end_of_query/>
Token.Keyword.Order
ASC
<end_of_token/>

<end_of_tokens/>
DESC
<end_of_query/>
Token.Keyword.Order
DESC
<end_of_token/>

<end_of_tokens/>
NULLS FIRST
<end_of_query/>
Token.Keyword.Order
NULLS FIRST
<end_of_token/>

<end_of_tokens/>
NULLS LAST
<end_of_query/>
Token.Keyword.Order
NULLS LAST
<end_of_token/>

<end_of_tokens/>
ASC NULLS FIRST
<end_of_query/>
Token.Keyword.Order
ASC NULLS FIRST
<end_of_token/>

<end_of_tokens/>
ASC NULLS LAST
<end_of_query/>
Token.Keyword.Order
ASC NULLS LAST
<end_of_token/>

<end_of_tokens/>
DESC NULLS FIRST
<end_of_query/>
Token.Keyword.Order
DESC NULLS FIRST
<end_of_token/>

<end_of_tokens/>
DESC NULLS LAST
<end_of_query/>
Token.Keyword.Order
DESC NULLS LAST
<end_of_token/>

<end_of_tokens/>
foo
<end_of_query/>
Token.Name
foo
<end_of_token/>

<end_of_tokens/>
Foo
<end_of_query/>
Token.Name
Foo
<end_of_token/>

<end_of_tokens/>
FOO
<end_of_query/>
Token.Name
FOO
<end_of_token/>

<end_of_tokens/>
v$name
<end_of_query/>
Token.Name
v$name
<end_of_token/>

<end_of_tokens/>
GROUP BY
<end_of_query/>
Token.Keyword
GROUP BY
<end_of_token/>

<end_of_tokens/>
ORDER BY
<end_of_query/>
Token.Keyword
ORDER BY
<end_of_token/>

<end_of_tokens/>
WINDOW w AS
<end_of_query/>
Token.Keyword
WINDOW
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Name
w
<end_of_token/>
Token.Text.Whitespace
 
<end_of_token/>
Token.Keyword
AS
<end_of_token/>

<end_of_tokens/>
LIKE
<end_of_query/>
Token.Operator.Comparison
LIKE
<end_of_token/>

<end_of_tokens/>
ILIKE
<end_of_query/>
Token.Operator.Comparison
ILIKE
<end_of_token/>

<end_of_tokens/>
NOT LIKE
<end_of_query/>
Token.Operator.Comparison
NOT LIKE
<end_of_token/>

<end_of_tokens/>
NOT ILIKE
<end_of_query/>
Token.Operator.Comparison
NOT ILIKE
<end_of_token/>

<end_of_tokens/>
NOT   LIKE
<end_of_query/>
Token.Operator.Comparison
NOT   LIKE
<end_of_token/>

<end_of_tokens/>
NOT    ILIKE
<end_of_query/>
Token.Operator.Comparison
NOT    ILIKE
<end_of_token/>

<end_of_tokens/>
LIKEaaa
<end_of_query/>
Token.Name
LIKEaaa
<end_of_token/>

<end_of_tokens/>
bILIKE
<end_of_query/>
Token.Name
bILIKE
<end_of_token/>

<end_of_tokens/>
aaILIKEbb
<end_of_query/>
Token.Name
aaILIKEbb
<end_of_token/>

<end_of_tokens/>
NOTLIKE
<end_of_query/>
Token.Name
NOTLIKE
<end_of_token/>

<end_of_tokens/>
NOTILIKE
<end_of_query/>
Token.Name
NOTILIKE
<end_of_token/>

<end_of_tokens/>
AT TIME ZONE 'UTC'
<end_of_query/>
Token.Keyword.TZCast
AT TIME ZONE 'UTC'
<end_of_token/>

<end_of_tokens/>
\copy
<end_of_query/>
Token.Generic.Command
\copy
<end_of_token/>

<end_of_tokens/>
